if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m3']=[{"name":"212-00.md","path":"3-Mac_typora/212-00.md","content":"#  利用amWiki轻松打造知识库或技术文档系统\r\n\r\n原创[Achilles](https://me.csdn.net/cjmqas) 发布于2017-10-27 11:35:15 阅读数 2857 收藏\r\n\r\n展开\r\n\r\n[![img](D:\\Typora_pic\\20191224191326584.png)](https://blog.csdn.net/csdngkk/article/details/103682497)\r\n\r\n# 利用amWiki轻松打造知识库或技术文档系统\r\n\r\n- \\1. 我为什么选择amWiki\r\n  - [1.1. 用什么来写？](https://blog.csdn.net/cjmqas/article/details/78363116#11-用什么来写)\r\n  - [1.2. 用什么系统？](https://blog.csdn.net/cjmqas/article/details/78363116#12-用什么系统)\r\n  - [1.3. amWiki的优点](https://blog.csdn.net/cjmqas/article/details/78363116#13-amwiki的优点)\r\n  - [1.4. amWiki的架构](https://blog.csdn.net/cjmqas/article/details/78363116#14-amwiki的架构)\r\n- \\2. 如何使用amWiki\r\n  - [2.1. 获取amWiki](https://blog.csdn.net/cjmqas/article/details/78363116#21-获取amwiki)\r\n  - [2.2. 如何开始一个新文库](https://blog.csdn.net/cjmqas/article/details/78363116#22-如何开始一个新文库)\r\n  - 2.3. amWiki的配置文件\r\n    - [2.3.1. 常规配置](https://blog.csdn.net/cjmqas/article/details/78363116#231-常规配置)\r\n    - [2.3.2. 其他配置项](https://blog.csdn.net/cjmqas/article/details/78363116#232-其他配置项)\r\n  - 2.4. 有序的写Markdown文档\r\n    - [2.4.1. 文库目录结构](https://blog.csdn.net/cjmqas/article/details/78363116#241-文库目录结构)\r\n    - [2.4.2. MD文件命名规范](https://blog.csdn.net/cjmqas/article/details/78363116#242-md文件命名规范)\r\n    - [2.4.3. 再次生成文档](https://blog.csdn.net/cjmqas/article/details/78363116#243-再次生成文档)\r\n  - [2.5. 使用本地模式直接浏览](https://blog.csdn.net/cjmqas/article/details/78363116#25-使用本地模式直接浏览)\r\n  - 2.6. 如何测试文档中约定的接口\r\n    - [2.6.1. 激活测试的条件](https://blog.csdn.net/cjmqas/article/details/78363116#261-激活测试的条件)\r\n    - [2.6.2. 接口测试的工作原理与步骤](https://blog.csdn.net/cjmqas/article/details/78363116#262-接口测试的工作原理与步骤)\r\n    - 2.6.3. 接口测试文档的格式要求\r\n      - [2.6.3.1. 请求地址的格式](https://blog.csdn.net/cjmqas/article/details/78363116#2631-请求地址的格式)\r\n      - [2.6.3.2. 请求类型的格式](https://blog.csdn.net/cjmqas/article/details/78363116#2632-请求类型的格式)\r\n      - [2.6.3.3. 请求参数的格式](https://blog.csdn.net/cjmqas/article/details/78363116#2633-请求参数的格式)\r\n- \\3. 如何用Visual Studio Code来便捷书写Markdown文档\r\n  - [3.1. 为什么使用 VSCode](https://blog.csdn.net/cjmqas/article/details/78363116#31-为什么使用-vscode)\r\n  - 3.2. 使用amWiki插件\r\n    - [3.2.1. 安装](https://blog.csdn.net/cjmqas/article/details/78363116#321-安装)\r\n    - [3.2.2. 生成文档](https://blog.csdn.net/cjmqas/article/details/78363116#322-生成文档)\r\n    - [3.2.3. 辅助编辑MD文档](https://blog.csdn.net/cjmqas/article/details/78363116#323-辅助编辑md文档)\r\n  - 3.3. 利用插件更好的写Markdown\r\n    - [3.3.1. 安装插件](https://blog.csdn.net/cjmqas/article/details/78363116#331-安装插件)\r\n    - 3.3.2. 强大的Markdown TOC插件\r\n      - [3.3.2.1. 为什么要讲这个插件？](https://blog.csdn.net/cjmqas/article/details/78363116#3321-为什么要讲这个插件)\r\n      - [3.3.2.2. 插入和更新多级列表](https://blog.csdn.net/cjmqas/article/details/78363116#3322-插入和更新多级列表)\r\n      - [3.3.2.3. 生成多级列表的目录](https://blog.csdn.net/cjmqas/article/details/78363116#3323-生成多级列表的目录)\r\n      - [3.3.2.4. 每个人都会用到的特殊情况](https://blog.csdn.net/cjmqas/article/details/78363116#3324-每个人都会用到的特殊情况)\r\n    - [3.3.3. Markdown文档转换到其他格式](https://blog.csdn.net/cjmqas/article/details/78363116#333-markdown文档转换到其他格式)\r\n\r\n## 1. 我为什么选择amWiki\r\n\r\n### 1.1. 用什么来写？\r\n\r\n程序员写技术文档向来是个头大的事情。相信绝大部分人都有用Word写文档的经历。用Word写文档，的确是个万能的解决方案，但是你会花上大量的精力在排版上。我相信现在还有很多人不会用样式来排版。由于这些原因，最近几年Markdown格式（以下简称：MD）逐渐流行开来，使得人们在写文档时，不需要关心排版，直接书写，保证思路的流畅性。再加上MD格式被GitHub官方默认支持，使得MD开始大红大紫。\r\n\r\n事实上，比MD格式出现更早的，还有一个叫“reStructuredText”的格式，简称“reST”，文件扩展名是rst。这是Python文档标准书写格式，所有的Python插件或者是库都是使用这个格式书写。它和MD格式一样，都是书写的时候不需要关心排版，但是reST比MD的功能强大很多，只不过支持的系统比较少。\r\n\r\n### 1.2. 用什么系统？\r\n\r\n如何有序的组织技术文档，也是一个头大的事情。市面上有大量的技术文档系统，或者是知识库系统。要么价格昂贵，要么做得不尽如人意。“GitHub Pages”的横空出世，让大家发现了一种新的技术文档系统的新的模式。你只需把MD文档按照简单的约定格式提交到git仓库里，系统会自动生成网页版本的文档。同样的，基于reST文档格式的，ReadTheDoc.org网站提供了类似的服务。\r\n\r\n现在我们来看看市面上常见的知识库/技术文档系统\r\n\r\n| 系统            | 特性                                                         |\r\n| --------------- | ------------------------------------------------------------ |\r\n| 传统Wiki        | 语法晦涩难懂， 不支持树状分类，直接Pass                      |\r\n| GitHub Pages    | 网红一枚，但是不能本地搭建，只能在线托管                     |\r\n| GitLab Pages    | GitLab是一个类似于GitHub的系统，可以搭建在自己的服务器上，很强大，但是搭建过程相当痛苦，巨复杂 |\r\n| ReadTheDoc.org  | 和GitHub Pages很像，但是支持reST，也是不能本地搭建，只能在线托管 |\r\n| gitbook         | 可以本地搭建，我更认为这是一个写书系统                       |\r\n| Jira Confluence | Jira大名鼎鼎，旗下Confluence也很强大，怎奈何一个“贵”！！不差钱的可以考虑 |\r\n\r\n我们先来想一下我们梦想中的技术文档系统或者知识库系统是什么样子的。\r\n\r\n1. 价格便宜，免费的最好\r\n2. 能够轻松搭建\r\n3. 能够本地搭建，而不是托管（毕竟有些技术文档还是要保密的）\r\n4. 要有树状目录，最好支持多级目录（这个很重要，便于分类）\r\n5. 写文档迅速，不需要考虑排版，最好能够支持自动排版\r\n6. 支持流程图、函数等高级特性\r\n7. 支持代码自动排版和代码高亮（这是硬指标）\r\n\r\n当我们找到amWiki的时候，我们发现它就是我们梦想中的系统\r\n\r\n### 1.3. amWiki的优点\r\n\r\n我们来看看官网上列举的amWiki特性\r\n\r\n- 文档系统采用 markdown 语法\r\n- 不用数据库，文档使用 .md 格式保存本地文件\r\n- 无需服务端开发，只需支持 http 静态访问网页空间\r\n- 一键创建新的文库\r\n- 自动更新文库导航目录\r\n- 支持多级目录\r\n- 支持截图直接粘帖为本地 png 并插入当前 markdown\r\n- 文档web端自适应显示，适合所有平台\r\n- 支持接口文档自动抓取内容生成简单的ajax测试\r\n- 无需服务端的全文库内容搜索与计分排序\r\n\r\n看完这些，我们发现它已经超出我们的梦想了，实现很多很有意思的功能。\r\n\r\n### 1.4. amWiki的架构\r\n\r\n你可以使用VSCode或者ATOM来写MD文档。amWiki提供了VSCode和ATOM的插件，便于用户自动生成Html文档。你也可以把相关MD文件保存在版本库中。通过命令可以生成本地打开的html文件、HTTP服务器支持的文件、GitHub Pages支持的文件等三种类型。\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027113546173-1577201668511.png)\r\n\r\n## 2. 如何使用amWiki\r\n\r\n### 2.1. 获取amWiki\r\n\r\namWiki是一个基于node.js的库，所以我们可以通过amwiki来安装。\r\nnode.js的包管理程序是npm，执行下面这行命令即可。\r\n\r\n1. 安装node.js\r\n2. 执行命令\r\n\r\n```shell\r\nnpm install -g amwiki1\r\n```\r\n\r\n### 2.2. 如何开始一个新文库\r\n\r\n创建一个自己的目录，并在当前目录下执行命令\r\n\r\n```shell\r\namwiki -c1\r\n```\r\n\r\n这样，amwiki会动态创建一批文件和文件夹\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027162025890.png)\r\n其中：\r\n\r\n- config.json：这个是核心的amwiki配置文件，必备！！\r\n- library目录： 用于存放md文件的目录，必备！！\r\n- amWiki目录：amWiki动态创建的js、css等文件，临时删除也可以\r\n- index.html：amWiki动态创建的首页文件，临时删除也可以\r\n\r\n### 2.3. amWiki的配置文件\r\n\r\namWiki的配置文件本身是个json文件\r\n\r\n#### 2.3.1. 常规配置\r\n\r\n| key         | value                                                        |\r\n| ----------- | ------------------------------------------------------------ |\r\n| name        | 自定义文档系统名称，这个名称会显示在首页上                   |\r\n| ver         | 自定义文档系统版本号，这个版本号会显示在首页上               |\r\n| logo        | 自定义首页左上角显示的logo                                   |\r\n| page-mounts | 如果是true，可以生成本地打开版本的html系统页面；false，则只生成在线打开的html系统页面 |\r\n| testing     | 设置为 true 的文库，文档满足一定条件将在右上角出现打开测试面板的按钮 |\r\n\r\n> 注意：\r\n> 如果文档时本地打开的话，不支持测试接口功能\r\n\r\n例：\r\n\r\n```json\r\n{\r\n    \"name\": \"xxx文档中心\",\r\n    \"ver\": \"1.0\",\r\n    \"logo\": \"http://xxx.com/logo.png\",\r\n    \"page-mounts\": false,\r\n    \"testing\": true\r\n}1234567\r\n```\r\n\r\n#### 2.3.2. 其他配置项\r\n\r\n| key            | value                                                        |\r\n| -------------- | ------------------------------------------------------------ |\r\n| colour         | 定义界面着色, 支持 # 开头的 6 位 16 进制 web 色、RGB 色两种模式 |\r\n| github-url     | github 项目地址。如果你的项目要放在github pages上，请设置    |\r\n| imports        | 页面嵌入自定义 css、js 文件                                  |\r\n| library-prefix | 重新定义 library 路径，这点在企业级部署的时候倒是挺有用的    |\r\n\r\n例：\r\n\r\n```json\r\n{\r\n    \"colour\": \"default\",\r\n    \"github-url\": \"https://github.com/TevinLi/amWiki\",\r\n    \"imports\": [\r\n        \"assets/test.css\",\r\n        \"assets/test.js\"\r\n    ],\r\n    \"library-prefix\": \"/admin/dev-wiki\"\r\n}123456789\r\n```\r\n\r\n### 2.4. 有序的写Markdown文档\r\n\r\n#### 2.4.1. 文库目录结构\r\n\r\n```\r\nindex.html               // http 访问首页\r\namWiki/                  // amWiki Web 端工作文件存放目录\r\nlibrary/                 // 您的 markdown 文库目录，所有文件必须使用 .md 格式\r\n  ├ $navigation.md       // amWiki 文库目录导航文件，可自动/手动更新\r\n  ├ home-首页.md         // 内容区默认显示内容\r\n  ├ 01-关于amWiki文库/    // markdown 文件夹 01\r\n  │   ├ 001-关于amWiki   // 一些 markdown 文档，支持更深目录\r\n  │   └ 002-...\r\n  ├ 02-学习markdown/     // markdown 文件夹 02\r\n  │   ├ 001-md入门\r\n  │   └ 002-...\r\n  └ 03-...               // 更多 markdown 文件夹\r\nconfig.json              // 文库配置文件\r\n(assetes/)               // 如果您粘帖截图，图片文件将自动创建在此处1234567891011121314\r\n```\r\n\r\n#### 2.4.2. MD文件命名规范\r\n\r\n1. 任何一个library目录下的目录和文件，都应以数字开头用于排序\r\n2. 数字必须要么是整型要么是浮点数，且位数要一样（笔者试过，系统是按照字符串比大小的，而不是按照数值来比大小排序的）\r\n3. 数字后面紧跟减号\r\n4. 减号后面就是标题名称\r\n\r\n#### 2.4.3. 再次生成文档\r\n\r\n当你每次更新好代码时，执行\r\n\r\n```sh\r\namwiki -c1\r\n```\r\n\r\n即可更新html文档\r\n\r\n### 2.5. 使用本地模式直接浏览\r\n\r\n1.开启本地模式， 在 config.json 上增加\r\n\r\n```json\r\n{\r\n    \"page-mounts\": true\r\n}123\r\n```\r\n\r\n2.重新创建文档\r\n\r\n```sh\r\namwiki -c1\r\n```\r\n\r\n3.打开index.html即可\r\n\r\n> **amWiki强大在本地模式也可以搜索任意文档内容**\r\n\r\n### 2.6. 如何测试文档中约定的接口\r\n\r\n#### 2.6.1. 激活测试的条件\r\n\r\namWiki有个亮点功能就是“测试即服务”，可以直接测试文档中约定的接口。\r\n\r\n**当一篇文档中使用了 “请求地址”、“请求类型”、“请求参数” 三个字段作为 h3标题 并配套对应内容时，将激活接口测试功能**\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027162141727.png)\r\n\r\n此时文档右上角将出现 “接口测试” 按钮，例如：\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027162216230.png)\r\n\r\n#### 2.6.2. 接口测试的工作原理与步骤\r\n\r\n1. 当测试模块处于打开状态时，每次打开文档都会扫描文档转换 html 后的内容，满足三个 h3 时即开启测试功能\r\n2. 开启当前文档测试功能后，即会从页面上 抓取 符合一定格式的测试内容\r\n3. 格式化抓取的内容并生成可再次修改的表单\r\n4. 用户点击发送请求时，先并入全局参数到当前参数列表，再发送请求\r\n5. 收到请求结果，格式化显示\r\n\r\n#### 2.6.3. 接口测试文档的格式要求\r\n\r\n##### 2.6.3.1. 请求地址的格式\r\n\r\n请求地址可以使用带 http 与不带 http 两种，下面两种写法都是合适的\r\n\r\n```\r\n/api/customer-flow\r\nhttp://localhost/api/customer-flow12\r\n```\r\n\r\n注意，不带 http 将自动和当前域名拼合为完整绝对路径，而不是使用相对路径\r\n\r\n##### 2.6.3.2. 请求类型的格式\r\n\r\namWiki 暂时只支持 **Get**、**Post**、**Put**、**Delete** 四种普通 ajax 请求，不支持文件上传和其他高级方式通讯\r\n\r\n##### 2.6.3.3. 请求参数的格式\r\n\r\n- 当接口不需要参数时，直接使用 **“无”** 即可\r\n- 请求参数列表必须使用 **表格**，且必须按 `参数名`、`类型`、`必填`、`描述`、`默认值`、`参考值` 的栏目顺序建立表格，否则不能正常抓取。\r\n\r\n其中：\r\n\r\n- 默认值与参考值同属参数的值，但是优先显示默认值，只有当没有默认值时参考值才有效，参考值是为了方便测试之用\r\n- 参考值一栏可选，不写参考值的整个表格栏位，不会影响测试功能\r\n\r\n## 3. 如何用Visual Studio Code来便捷书写Markdown文档\r\n\r\n### 3.1. 为什么使用 VSCode\r\n\r\n这个只是个人喜好，ATOM很笨重，因为是github出品的编辑器，有的时候插件都无法下载，大家懂得。而VSCode从系统资源占有率、运行速度上都优于ATOM，所以我个人推荐使用VSCode。\r\n\r\n### 3.2. 使用amWiki插件\r\n\r\n#### 3.2.1. 安装\r\n\r\n你需要搜索amWiki插件，并安装\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027162245500.png)\r\n\r\n#### 3.2.2. 生成文档\r\n\r\n在config.json上点击右键，可以看到菜单的第一项就是“基于当前config.json创建wiki”。只要点击即可创建。\r\n\r\n这个菜单命令等价于命令：\r\n\r\n```sh\r\namwiki -c1\r\n```\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027162410450.png)\r\n\r\n#### 3.2.3. 辅助编辑MD文档\r\n\r\n在任何一个打开的MD文档中点击右键，就可以看到有五个非常有用的选项\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027162816778.png)\r\n\r\n- 黏贴截图到文档：用来方便的插入基于链接的截图\r\n- 插入页内目录：由于系统不支持TOC标签，插件提供了一个支持便捷插入页内目录的工具\r\n- 更新页面挂载数据\r\n- 导出项目为：github wiki\r\n- 浏览当前页面\r\n\r\n### 3.3. 利用插件更好的写Markdown\r\n\r\n#### 3.3.1. 安装插件\r\n\r\nVSCode提供了很多的Markdown辅助插件，建议都安装\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027163141052.png)\r\n\r\n#### 3.3.2. 强大的Markdown TOC插件\r\n\r\n##### 3.3.2.1. 为什么要讲这个插件？\r\n\r\n因为Markdown有个重要的缺陷，就是不支持多级列表。而我们正常写官方文档的时候又习惯于使用多级列表给各级标题编号。如果没有多级列表，总觉得文档不正式。这个插件从另一个角度帮我们解决了这个问题。\r\n\r\n##### 3.3.2.2. 插入和更新多级列表\r\n\r\n右键点击文档任何地方，我们都可以看到一个菜单\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027163227450.png)\r\n\r\n点击“Markdown Sections: insert/Update”命令，这个插件就会帮我们自动对“#”开头的标题创建或者更新多级标题\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027163326050.png)\r\n很赞吧~~~~。\r\n\r\n##### 3.3.2.3. 生成多级列表的目录\r\n\r\n点击右键菜单中的“Markdown TOC: insert/Update”命令，这个插件就会帮我们自动生成支持多级列表的目录\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027163439347.png)\r\n\r\n##### 3.3.2.4. 每个人都会用到的特殊情况\r\n\r\n一般的，amWiki会把一级标题（一个#开头的）作为文档的标题。我们也不希望把文档标题进行标号。我们希望从二级标题开始编号。这个时候我们只需要在生成目录的注释中，声明depthFrom:2。再执行上述两步即可\r\n\r\n```\r\n<!-- TOC depthFrom:2 -->1\r\n```\r\n\r\n![这里写图片描述](D:\\Typora_pic\\20171027163509121.png)\r\n\r\n#### 3.3.3. Markdown文档转换到其他格式\r\n\r\n有的时候，我们还是会需要生成别的格式的文档，这个时候你需要安装pandoc插件，当然也要安装pandoc的安装包。\r\n使用这个插件就可以支持将MD文档转成word、pdf等文档\r\n\r\n> 作者简介：陈建明，目前就职于上海恺英网络科技有限公司，C++专业组组长。\r\n\r\n- [点赞 2](javascript:;)\r\n- [收藏](javascript:;)\r\n- [分享](javascript:;)\r\n- \r\n\r\n[![img](D:\\Typora_pic\\3_cjmqas.jpg)![img](D:\\Typora_pic\\13.png)](https://blog.csdn.net/cjmqas)\r\n\r\n[Achilles](https://blog.csdn.net/cjmqas)\r\n\r\n发布了5 篇原创文章 · 获赞 27 · 访问量 3万+\r\n\r\n[私信](https://im.csdn.net/im/main.html?userName=cjmqas)关注\r\n\r\n<iframe id=\"iframeu3501897_0\" name=\"iframeu3501897_0\" src=\"https://pos.baidu.com/wccm?conwid=900&amp;conhei=90&amp;rdid=3501897&amp;dc=3&amp;exps=110011,117313&amp;psi=187a8db66b11e6f0a52973b55c3f3ea7&amp;di=u3501897&amp;dri=0&amp;dis=0&amp;dai=1&amp;ps=14629x57&amp;enu=encoding&amp;ant=0&amp;dcb=___adblockplus_&amp;dtm=HTML_POST&amp;dvi=0.0&amp;dci=-1&amp;dpt=none&amp;tsr=0&amp;tpr=1577201592425&amp;ti=%E5%88%A9%E7%94%A8amWiki%E8%BD%BB%E6%9D%BE%E6%89%93%E9%80%A0&amp;ari=2&amp;ver=1217&amp;dbv=2&amp;drs=1&amp;pcs=1226x582&amp;pss=1226x14742&amp;cfv=0&amp;cpl=3&amp;chi=1&amp;cce=true&amp;cec=UTF-8&amp;tlm=1577201592&amp;prot=2&amp;rw=582&amp;ltu=https%3A%2F%2Fblog.csdn.net%2Fcjmqas%2Farticle%2Fdetails%2F78363116&amp;ltr=https%3A%2F%2Fblog.csdn.net%2Fcjmqas%2Farticle%2Fdetails%2F78363116&amp;ecd=1&amp;uc=1366x744&amp;pis=-1x-1&amp;sr=1366x768&amp;tcn=1577201592&amp;qn=508c2546e7b38029&amp;tt=1577201592413.18.19.21\" width=\"900\" height=\"90\" align=\"center,center\" vspace=\"0\" hspace=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\" style=\"box-sizing: inherit; outline: 0px; margin: 0px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; border: 0px; vertical-align: bottom; width: 900px; height: 90px;\"></iframe>\r\n\r\n![img]()\r\n\r\n\r\n\r\n\r\n\r\n[![img](D:\\Typora_pic\\anonymous-User-img-1577201668720.png)](javascript:void(0);)\r\n\r\n\r\n\r\n![img](D:\\Typora_pic\\fanhuidingbucopy.png)","timestamp":1590329650947},{"name":"213-brew替换国内源.md","path":"3-Mac_typora/213-brew替换国内源.md","content":"# Mac的brew修改国内源\n\n转载[springxf](https://me.csdn.net/weixin_43902730) 发布于2019-03-06 22:53:28 阅读数 5428 收藏\n\n### Mac的brew修改国内源\n\n- - [阿里云](https://blog.csdn.net/weixin_43902730/article/details/88261760#_2)\n  - [清华源](https://blog.csdn.net/weixin_43902730/article/details/88261760#_14)\n\n\n\n## 阿里云\n\n```\n# 替换brew.git\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n# 替换homebrew-core.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n# 刷新源\nbrew update\n12345678\n```\n\n## 清华源\n\n```\n# 替换brew.git\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\n# 替换homebrew-core.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\n# 刷新源\nbrew update\n12345678\n```","timestamp":1590329650947},{"name":"214-mac浏览器快捷键.md","path":"3-Mac_typora/214-mac浏览器快捷键.md","content":"# Mac新手必知的快捷键组合！让你的Mac浏览器(Safari、Chrome)快速运转！\n\n[![Mac小叮当](d:\\Typora_pic/v2-7df6850977d80777c85b0d824480d57e_xs.jpg)](https://www.zhihu.com/people/li-ya-ning-14)\n\n[Mac小叮当](https://www.zhihu.com/people/li-ya-ning-14)\n\nMac软件优质推荐\n\n1 人赞同了该文章\n\n如何在Mac浏览器中新建标签页？如何找到Mac浏览器的历史访问记录？如何刷新Mac网页？对于新入手Mac的小白来说，可能会一头雾水，拿着鼠标点点点。\n你知道提高Mac浏览器（包括Safari和Chrome）效率的快捷键吗？\n今天，给大家分享几个可以让Mac浏览器(Safari、Chrome)快速运转快捷键组合！简单高效，Mac新手必备技能！\n\n![img](d:\\Typora_pic/v2-686abc596d2bb7365b42243ea60388be_hd.jpg)\n\n## 让你的Mac浏览器(Safari、Chrome)快速运转的快捷操作\n\n**1.Command+R（刷新页面，支持Safari和Chrome）**\nWindows下刷新网页是F5，转到Mac后变成了Command+R，刷新属于高频操作，加载不全、样式混乱、抢票、抢手机等都用得上。\n\n**2.Command++/-/0（放大、缩小、还原，支持Safari和Chrome）**\n有些网站用了比较大的宽度设计，或者因为兼容性导致宽度溢出，缩小便能显示完全；\n有时候截图需要截取更多的部分，这个快捷键也能派上用场。\n\n**3. Command+T（新建标签页，支持Safari和Chrome）**\nCommand+N是新建单独窗口，窗口太多容易疯，Command+T才是新建标签页，将同一场景标签页归类在一个浏览器窗口内，才是更好的选择。\n\n**4.Command+L（定位到地址栏，支持Safari和Chrome）**\n我们键盘党，从来都是能键盘就不动鼠标。\n\n**5.Command+Y（打开历史访问，支持Safari和Chrome）**\n经常想找之前浏览过有用的网址，进入历史访问，搜索关键词（网址、标题均可）即可快速检索到。\n\n**6.Command+Shift+N（新建隐私浏览窗口，支持Safari和Chrome）**\n有些访问不想被浏览器记录，可以进入隐私模式，Safari和Chrome等主流浏览器都支持此模式，但二者还略有区别，隐私模式下，Safari完全不记录cookie，Chrome会记录cookie至关闭浏览器才清除掉。\n所以Safari的隐私模式不能保持网站的登陆状态，但Chrome能。\n\n**除了以上几个我最常用的Mac浏览器快捷键，个人经常用到的还有这几个：**\n\n1.Command+Option+U：显示源代码\n\n2.Command+Option+I：开发者工具\n\n3.Command+D：收藏\n\n4.Command+Shift+J：打开下载（Chrome）","timestamp":1590329650947},{"name":"215-MarkDown.md","path":"3-Mac_typora/215-MarkDown.md","content":"- # Typora-Mac\n\nAugust 3, 2019 by typora.io\n\n  The latest version of Typora supports macOS ≥ 10.13, for older macOS, 10.11 and 10.12 are not in active support. Support for macOS ≤ 10.10 has ended.\n\n  You could find and download available working versions here:\n\n  - **macOS ≥ 10.13** [latest version](https://typora.io/download/Typora.dmg)\n\n- **macOS 10.11 and 10.12** [0.9.9.26 beta](https://typora.io/download/Typora-0.9.9.26.dmg)\n  \n- macOS 10.10** [0.9.9.25.3 beta]\n  \n![img](/xiaohan/typora_book/typora_pic/96.jpeg)\n  \n  [erlingmusan](https://www.jianshu.com/u/41bb754329fe)关注\n  \n  2017.07.31 00:56:13字数 1,639阅读 752\n  \n  # MarkDown-Typora-Mac\n  \n  [TOC]\n  \n  ------\n  \n  # 1. 概述\n  \n  ## 1.1. 宗旨\n  \n  **Markdown**的目标是实现「易读易写」。\n  \n  **Markdown**语法受到一些既有**text-to-HTML**格式的影响，包括[Setext](https://link.jianshu.com/?t=http://docutils.sourceforge.net/mirror/setext.html)、[atx](https://link.jianshu.com/?t=http://www.aaronsw.com/2002/atx/)、[Textile](https://link.jianshu.com/?t=http://textism.com/tools/textile/)、[reStructuredText](https://link.jianshu.com/?t=http://docutils.sourceforge.net/rst.html)、[Grutatext](https://link.jianshu.com/?t=http://www.triptico.com/software/grutatxt.html)和[EtText](https://link.jianshu.com/?t=http://ettext.taint.org/doc/)，而最大灵感来源其实是纯文本电子邮件的格式。\n  \n  ## 1.2. 兼容 HTML\n  \n  不在**Markdown**涵盖范围之内的标签，都可以直接在文档里面用**HTML**撰写。不需要额外标注这是**HTML**或是**Markdown**；只要直接加标签就可以了。\n  \n  ```xml\n  这是一个普通段落。\n  <table>\n      <tr>\n          <td>Foo</td>\n      </tr>\n  </table>\n  这是另一个普通段落。\n  ```\n  \n  请注意，在**HTML**区块标签间的**Markdown**格式语法将不会被处理。比如，你在**HTML**区块内使用**Markdown**样式的**强调**会没有效果。\n  \n  ## 1.3. 特殊字符自动转换\n  \n  在**HTML**文件中，有两个字符需要特殊处理：`<`和`&`。`<`符号用于起始标签，`&`符号则用于标记**HTML**实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是`<`和`&`。\n  \n  `&`字符尤其让网络文档编写者受折磨，如果你要打「AT&T」 ，你必须要写成「AT`&`T」。而网址中的`&`字符也要转换。比如你要链接到：\n  \n  ```cpp\n  http://images.google.com/images?num=30&q=larry+bird\n  ```\n  \n  你必须要把网址转换写为\n  \n  ```cpp\n  http://images.google.com/images?num=30&q=larry+bird\n  ```\n  \n  才能放到链接标签的`href`属性里。不用说也知道这很容易忽略，这也可能是**HTML**标准检验所检查到的错误中，数量最多的。\n  \n  类似的状况也会发生在`<`符号上，因为**Markdown**允许兼容 HTML，如果你是把`<`符号作为**HTML**标签的定界符使用，那**Markdown**也不会对它做任何转换，但是如果你写：\n  \n  ```undefined\n  4 < 5\n  ```\n  \n  Markdown 将会把它转换为：\n  \n  ```undefined\n  4 < 5\n  ```\n  \n  不过需要注意的是，**code**范围内，不论是行内还是区块，`<`和`&`两个符号都**一定**会被转换成**HTML**实体，这项特性让你可以很容易地用**Markdown**写**HTML code**（和**HTML**相对而言，**HTML**语法中，你要把所有的`<`和`&`都转换为**HTML**实体，才能在**HTML**文件里面写出**HTML code**。）\n  \n  ------\n  \n  # 2. Key\n  \n  - Select word: `cmd+D`\n  - Delete word: `shift+cmd+D`\n  - Select line/sentence: `cmd+L`\n  - Delete line/sentence: `shift+cmd+L`\n  - Select row in table: `cmd+L`\n  - Add row in table: `cmd+Enter`\n  - Select Styled Scope (or cell in a table) `cmd+E`\n  - Jump to selection: `cmd+J`\n  - Jump to Top: `cmd+`\n  - Jump To Bottom: `cmd+↓`\n  - Increase/decrease heading level from `<p>` to `<h1>`: `cmd+-/+`\n  - New line: `shift+Return`\n  - Move table row/column: `⌘ + ⌃ + arrow key`.\n  \n  ------\n  \n  # 3. 区块元素\n  \n  ## 3.1. 内容目录\n  \n  在段落中填写 `[TOC]` 以显示全文内容的目录结构。\n  \n  ## 3.2. 段落和换行\n  \n  ```\n  Return\n  Shift` + `Return\n  ```\n  \n  ## 3.3. 标题\n  \n  ```undefined\n  Header 1\n  ========\n  \n  Header 2\n  --------\n  ```\n  \n  or\n  \n  ```bash\n  # Header 1\n  ## Header 2\n  ###### Header 6\n  ```\n  \n  ## 3.4. 区块引用\n  \n  > Angle brackets `>` are used for block quotes.\n  > Technically not every line needs to start with a `>` as long as\n  > there are no empty lines between paragraphs.\n  > Looks kinda ugly though.\n  >\n  > > Block quotes can be nested.\n  > >\n  > > > Multiple Levels\n  >\n  > Most markdown syntaxes work inside block quotes.\n  >\n  > - Lists\n  > - [Links](https://link.jianshu.com/?t=http://macdown.uranusjr.com)\n  > - Etc.\n  \n  Here is the code:\n  \n  ```jsx\n  > Angle brackets `>` are used for block quotes.  \n  Technically not every line needs to start with a `>` as long as\n  there are no empty lines between paragraphs.  \n  > Looks kinda ugly though.\n  > > Block quotes can be nested.  \n  > > > Multiple Levels\n  >\n  > Most markdown syntaxes work inside block quotes.\n  >\n  > * Lists\n  > * [Links][arbitrary_id]\n  > * Etc.\n  ```\n  \n  ## 3.5. 列表\n  \n  - Lists must be preceded by a blank line (or block element)\n  \n  - Unordered lists start each item with a `*`\n  \n  - `-` works too\n  \n  - Indent a level to make a nested list\n    1. Ordered lists are supported.\n    2. Start each item (number-period-space) like `1.`\n    3. It doesn\'t matter what number you use, I will render them sequentially\n    4. So you might want to start each line with `1.` and let me sort it out\n  \n  Here is the code:\n  \n  ```go\n  * Lists must be preceded by a blank line (or block element)\n  * Unordered lists start each item with a `*`\n  - `-` works too\n      * Indent a level to make a nested list\n          1. Ordered lists are supported.\n          2. Start each item (number-period-space) like `1. `\n          42. It doesn\'t matter what number you use, I will render them sequentially\n          1. So you might want to start each line with `1.` and let me sort it out\n  ```\n  \n  1. [x] I can render checkbox list syntax\n  \n  - [x] I support nesting\n  - [x] I support ordered *and* unordered lists\n  \n  1. [ ] I don\'t support clicking checkboxes directly in the html window\n  \n  ## 3.6. 代码区块\n  \n  `Inline code` is indicated by surrounding it with backticks:\n  ``Inline code``  \n  \\```Code with `backticks` ``` (mind the spaces preceding the final set of backticks)\n  多段代码换行+三个```\n  \n  ```bash\n  print(\'a\')\n  ```\n  \n  多段代码换行+三个`~`\n  \n  ```javascript\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  s = \"Python syntax highlighting\"\n  print s\n  ```\n  \n  换行+tab\n  \n  ```bash\n  print(\'This is a code block\')\n  ```\n  \n  ## 3.7. 分隔线\n  \n  ```\n  ***` or `---\n  ```\n  \n  ------\n  \n  # 4. 区段元素\n  \n  ## 4.1. 链接\n  \n  [uranusjr@gmail.com](https://link.jianshu.com/?t=mailto:uranusjr@gmail.com)\n  `<uranusjr@gmail.com>`\n  [http://macdown.uranusjr.com](https://link.jianshu.com/?t=http://macdown.uranusjr.com)\n  `<http://macdown.uranusjr.com>`\n  [Macdown Website](https://link.jianshu.com/?t=http://macdown.uranusjr.com)\n  `[Macdown Website](http://macdown.uranusjr.com \"Title\")` (The title is optional)\n  \n  ## 4.2. 引用\n  \n  Make [a link](https://link.jianshu.com/?t=http://macdown.uranusjr.com) `[a link][arbitrary_id]` then on it\'s own line anywhere else in the file:\n  `[arbitrary_id]: http://macdown.uranusjr.com \"Title\"`\n  \n  If the link text itself would make a good id, you can link [like this](https://link.jianshu.com/?t=http://macdown.uranusjr.com) `[like this][]`, then on it\'s own line anywhere else in the file:\n  `[like this]: http://macdown.uranusjr.com`\n  \n  ## 4.3. 强调\n  \n  **Strong**: `**Strong**` or `__Strong__` (Command-B)\n  *Emphasize*: `*Emphasize*` or `_Emphasize_`[[1\\]](https://www.jianshu.com/p/8121e4d57083#fn1) (Command-I)\n  \n  ## 4.4. 图片\n  \n  ```\n  ![](path/or/url/to.jpg \"Optional Title\")`\n  `![Alt Image Text][image-id]`\n  on it\'s own line elsewhere:\n  `[image-id]: path/or/url/to.jpg \"Optional Title\"\n  ```\n  \n  ## 4.5. 表格\n  \n  | First Header | Second Header |\n  | ------------ | ------------- |\n  | Content Cell | Content Cell  |\n  | Content Cell | Content Cell  |\n  \n  You can align cell contents with syntax like this:\n  \n  | Left Aligned  | Center Aligned  | Right Aligned |\n  | :------------ | :-------------: | ------------: |\n  | col 3 is      | some wordy text |         $1600 |\n  | col 2 is      |    centered     |           $12 |\n  | zebra stripes |    are neat     |            $1 |\n  \n  The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.\n  \n  ## 4.6. 脚注\n  \n  ```css\n  Text prior to footnote reference.[^2]\n  [^2] Comment to include in footnote.\n  H~2~O`, `X~long\\ text~\n  ```\n  \n  H2O\n  \n  Xlong text\n  \n  # 5. 高级\n  \n  ## 5.1. 数学\n  \n  $ 表示行内公式：\n  \n  质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n  \n  $ 表示整行公式：\n  \n  $E=mc^2$\n  \n  访问 [MathJax](https://link.jianshu.com/?t=http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。\n  \n  ## 5.2. 序列图\n  \n  主流支持`seq`，typora支持`sequence`\n  \n  ```sequence\n  Alice->Bob: Hello Bob, how are you?\n  Note right of Bob: Bob thinks\n  Bob-->Alice: I am good thanks!\n  ```\n  \n  **更多语法参考：**[序列图语法](https://link.jianshu.com/?t=https://bramp.github.io/js-sequence-diagrams/#syntax)\n  \n  \n  \n  ![img](/xiaohan/typora/624.png)\n  \n  \n  \n  ## 5.3. 流程图\n  \n  ```flow\n  st=>start: Start\n  op=>operation: Your Operation\n  cond=>condition: Yes or No?\n  e=>end\n  \n  st->op->cond\n  cond(yes)->e\n  cond(no)->op\n  ```\n  \n  **更多语法参考：**[流程图语法](https://link.jianshu.com/?t=http://flowchart.js.org/)\n  \n  ## 5.4. Mermaid\n  \n  ### Sequence\n  \n  ```mermaid\n  %% Example of sequence diagram\n    sequenceDiagram\n  \n      Alice->>Bob: Hello Bob, how are you?\n      alt is sick\n      Bob->>Alice: Not so good :(\n      else is well\n      Bob->>Alice: Feeling fresh like a daisy\n      end\n      opt Extra response\n      Bob->>Alice: Thanks for asking\n      end\n  ```\n  \n  **更多语法参考：**[Mermaid-Sequence](https://link.jianshu.com/?t=https://knsv.github.io/mermaid/#sequence-diagrams)\n  \n  ### Flowchart\n  \n  ```mermaid\n  graph LR\n  A[Hard edge] -->B(Round edge)\n      B --> C{Decision}\n      C -->|One| D[Result one]\n      C -->|Two| E[Result two]\n  ```\n  \n  **更多语法参考：**[Mermaid-Flowchart](https://link.jianshu.com/?t=https://knsv.github.io/mermaid/#flowcharts-basic-syntax)\n  \n  ### Gantt\n  \n  ```mermaid\n  %% Example with slection of syntaxes\n          gantt\n          dateFormat  YYYY-MM-DD\n          title Adding GANTT diagram functionality to mermaid\n      \n          section A section\n          Completed task            :done,    des1, 2014-01-06,2014-01-08\n          Active task               :active,  des2, 2014-01-09, 3d\n          Future task               :         des3, after des2, 5d\n          Future task2               :         des4, after des3, 5d\n      \n          section Critical tasks\n          Completed task in the critical line :crit, done, 2014-01-06,24h\n          Implement parser and jison          :crit, done, after des1, 2d\n          Create tests for parser             :crit, active, 3d\n          Future task in critical line        :crit, 5d\n          Create tests for renderer           :2d\n          Add to mermaid                      :1d\n      \n          section Documentation\n          Describe gantt syntax               :active, a1, after des1, 3d\n          Add gantt diagram to demo page      :after a1  , 20h\n          Add another diagram to demo page    :doc1, after a1  , 48h\n      \n          section Last section\n          Describe gantt syntax               :after doc1, 3d\n          Add gantt diagram to demo page      : 20h\n          Add another diagram to demo page    : 48h\n  ```\n  \n  **更多语法参考：**[Mermaid-Gantt](https://link.jianshu.com/?t=https://knsv.github.io/mermaid/#gant-diagrams)\n  \n  # 6 其它\n  \n  ## 6.1. 语法表格列表\n  \n  The following is a list of optional inline markups supported:\n  \n  | Option name                                                  | Markup                                                 | Result if enabled                                      |      |\n  | ------------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ---- |\n  | Intra-word emphasis                                          | So A*maz*ing                                           | So A *maz* ing                                         |      |\n  | Strikethrough                                                | ~~Much wow~~                                           | ~~Much wow~~                                           |      |\n  | Underline [[2\\]](https://www.jianshu.com/p/8121e4d57083#fn2) | _So doge_                                              | <u>So doge</u>                                         |      |\n  | Quote [[3\\]](https://www.jianshu.com/p/8121e4d57083#fn3)     | \"Such editor\"                                          | \"Such editor“                                          |      |\n  | Highlight                                                    | ==So good==                                            | ==So good==                                            |      |\n  | Superscript                                                  | hoge^(fuga)                                            | hogefuga                                               |      |\n  | Autolink                                                     | [http://t.co](https://link.jianshu.com/?t=http://t.co) | [http://t.co](https://link.jianshu.com/?t=http://t.co) |      |\n  | Footnotes                                                    | [^4] and [^4]:                                         | and footnote[^4]                                       |      |\n  \n  4You don\'t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes.\n  \n  **Markdown**支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n  \n  ```csharp\n  \\   反斜线\n  `   反引号\n  *   星号\n  _   底线\n  {}  花括号\n  []  方括号\n  ()  括弧\n  #   井字号\n  +   加号\n  -   减号\n  .   英文句点\n  !   惊叹号\n  ```\n  \n  ## 6.2. Jekyll front-matter\n  \n  ```css\n  ---\n  title: \"Macdown is my friend\"\n  date: 2014-06-06 20:00:00\n  ---\n  ```\n  \n  ## 6.3. 特殊符号 HTML Entities Codes\n  \n  © & ¨ ™ ¡ £\n  & < > ¥ € ® ± ¶ § ¦ ¯ « ·\n  \n  X² Y³ ¾ ¼ × ÷ »\n  \n  18ºC \" \'\n  \n  ## 6.4. Emoji表情 :smiley:\n  \n  > Blockquotes :star:\n  \n  ### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n  \n  - [x] :smiley: @mentions, :smiley: #refs, [links](https://www.jianshu.com/p/8121e4d57083), **formatting**, and <del>tags</del> supported :editormd-logo:;\n  - [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n  - [x] [ ] :smiley: this is a complete item :smiley:;\n  - [ ] []this is an incomplete item [test link](https://www.jianshu.com/p/8121e4d57083#) :fa-star: @pandao;\n  - [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](https://www.jianshu.com/p/8121e4d57083#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is :fa-star: :fa-gear: an incomplete item [test link](https://www.jianshu.com/p/8121e4d57083#);\n  \n  ------\n  \n  1. If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized [↩](https://www.jianshu.com/p/8121e4d57083#fnref1)\n  2. If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined. [↩](https://www.jianshu.com/p/8121e4d57083#fnref2)\n  3. **Quote** replaces literal `\"` characters with html `<q>` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote**is different from *blockquote*, which is part of standard Markdown. [↩](https://www.jianshu.com/p/8121e4d57083#fnref3)\n  \n- https://typora.io/download/Typora-0.9.9.25.3.dmg)","timestamp":1590329650947},{"name":"216-Markdown和Typora的基本使用.md","path":"3-Mac_typora/216-Markdown和Typora的基本使用.md","content":"# **Markdown和Typora的基本使用**\r\n\r\n2019.07.08 22:15 1440浏览\r\n\r\n2019年7月6日 对于我来说是一个具有划时代意义的日子，因为从今天开始我决定使用markdown来记录笔记，管理自己的知识。\r\n\r\n其实我在很早之前就已经接触过markdown了，但是一直觉得markdown使用起来非常繁琐（其实是我没有找到正确的打开方式），但是当我下载了Typora编辑器并尝试着把以前在为知上写过的一篇笔记使用markdown重写编写（使用Typora编辑器书写markdown笔记真的感觉自己就像在写代码一样）之后，我被深深的震撼了，这就是我想要的感觉（都怪为知的markdown编辑器太难用了）。\r\n\r\n我之前曾经尝试过很多个markdown的编辑器，但是大部分的markdown编辑器都是分成编辑页面和预览界面，这样存在一个严重的问题，编辑界面实在是太不美观了，而且我们在进行编辑的时候视线的焦点是在编辑页面上的，而编辑页面上混合的markdown代码严重降低了文本的信噪比。\r\n\r\n而Typora编辑器采用了“所见即所得”的方式，当我们写好markdown代码之后立马就会被渲染出来，就好像是我们直接采用了这样的格式一样，这才让我真正感受到了使用markdown进行文字编写的乐趣。\r\n\r\n额，扯远了，本文的目的是整理一些markdown的使用方式，以满足我日常编写笔记的需求。\r\n\r\n## 什么是markdown\r\n\r\n> Markdown是一种轻量级标记语言,传世人为John Gruber。它允许人们**使用易读易写的纯文本格式编写文档，然后转成有效的XHTML(或者是HTML)文档** ——维基百科\r\n\r\n可见，markdown的渲染还是基于HTML渲染引擎进行的。\r\n\r\n## 为什么我会选择markdown\r\n\r\n如果习惯使用Word或者WPS的话，肯能已经习惯了先编写不带任何格式的文本，然后再根据需要对文本引用各种各样的样式，在一些笔记软件（比如为知笔记）中的富文本编辑器也是使用这样的方式。\r\n\r\n如果非常熟悉使用富文本编辑器的方式来编写文档，那么可能能够写出非常美观的文档，但是这种富文本文档的可移植性非常差，甚至一些类型的文档只能用专门的软件来解码和渲染。但是markdown的渲染机制是先转换成有效的html文档然后进行渲染，而HTML是有完整的规范的，所以移植性会好很多。\r\n\r\n同时，使用markdown来编写文本让文本的样式变得可见，我们使用了什么样的样式可以直接在markdown代码中看见，这时候想要进行调整也容易了很多。\r\n\r\n最重要的一点是，因为markdown是使用纯文本的方式编写带有样式的文本，可以让我们更加专注于内容，而且作为一个程序开发人员来说，能像写代码一样写笔记本身就是一件幸福的事情。\r\n\r\n## markdown的基本使用\r\n\r\n言归正传，本文的主要目的是整理一些markdown的语法，为将来使用markdown进行编辑做好准备，同时也是为了能够在markdown的世界中写出样式跟我以前使用富文本编写笔记的样式类似的文本，因为在之前使用富文本编写笔记的时候积累了非常多的样式习惯,对于我个人来说，什么是重点，什么是难点等等都有自己的一套样式，所以我希望当我转而使用markdown进行笔记的编写的时候这些习惯不会受到影响，因此决定把这篇文章作为自己的第一篇博客。\r\n\r\nmarkdown中，实现同一个样式或者功能的语法有好几种，比如无序列表就可以使用 * - 或者+来实现，这可能是markdown考虑到已有的一些纯文本格式的标记语言的使用者的习惯而做出的兼容，这篇文章的目的不是为了介绍markdown的语法，而是作为我个人的一篇笔记而存在的，只是为了我自己能够顺畅的从富文本过度到markdown，所以对于某种样式或者功能，只会介绍一种方式。\r\n\r\n对于我来说，markdown的常用方法如下（当然有很多是在Typora编辑器中使用的方式） ：\r\n\r\n### 标题\r\n\r\nmarkdown支持如下的6级标题\r\n\r\n```markdown\r\n# 一级标题\r\n## 二级标题\r\n...\r\n###### 六级标题\r\n```\r\n\r\n### 字体加粗\r\n\r\n```markdown\r\n**加粗**\r\n```\r\n\r\n### 字体倾斜\r\n\r\n```markdown\r\n*倾斜*\r\n```\r\n\r\n### 字体加粗并倾斜\r\n\r\n```markdown\r\n***加粗倾斜***\r\n```\r\n\r\n### 删除线\r\n\r\n```markdown\r\n~~~删除线~~~\r\n```\r\n\r\n### 引用\r\n\r\n```markdown\r\n> 引用的文字\r\n```\r\n\r\n### 分割线\r\n\r\n```markdown\r\n---\r\n```\r\n\r\n### 引入图片\r\n\r\n```markdown\r\n![加载失败的提示](图片地址 \'图片标题\')\r\n<img src=\"图片地址\" width=\"50%\" height=\"50%\">\r\n```\r\n\r\n在markdown文档中引入图片是一件比较麻烦的事情，我们如果向将图片直接存储在文档当中就要使用base64这种编码把图片转换成一个大字符串，然后把这个大字符串一块放到文本之中，这样非常影响文本的美观，所以我一般不会使用这种方式向md文件中添加图片。\r\n\r\n基于这个原因，使用markdown编写文档的时候，搭配图床进行图片的存储就是非常有必要的。\r\n\r\n如果我们需要对图片的样式进行一些定制，那么也可以使用``标签\r\n\r\n### 引入链接\r\n\r\n```markdown\r\n[链接描述](链接地址)\r\n```\r\n\r\n### 无序列表\r\n\r\n```markdown\r\n* 列表项1\r\n* 列表项2\r\n```\r\n\r\n### 有序列表\r\n\r\n```markdown\r\n1. 列表项1\r\n2. 列表项2\r\n```\r\n\r\n对于无序列表和有序列表来说都是可以嵌套使用的。\r\n\r\n### 行内代码块\r\n\r\n```markdown\r\n`行内代码` \r\n```\r\n\r\n对于行内代码块来说，是非常方便的，在写技术博客的时候如果提到某个方法或者是某个类，可以直接使用行内代码块，提高可读性。\r\n\r\n### 多行代码块\r\n\r\n~~~markdown\r\n```多行代码块 多行代码块```\r\n~~~\r\n\r\nTypora中的多行代码块是可以支持不同语言的，因为对于不同的语言关键字什么的都不太一样，Typora可以针对不同的语言应用不同的样式使得代码的可读性提高。\r\n\r\n### 添加脚注\r\n\r\n```markdown\r\n正文[^脚注名称]\r\n```\r\n\r\n### 表格\r\n\r\n其实在markdown中使用代码编写一个表格还是比较麻烦的，因为源代码的可读性比较差（幸亏Typora是即时渲染的）\r\n\r\n在Typora中插入表格可以直接右键插入就可以了，非常方便。\r\n\r\n|      |      |      |\r\n| :--- | :--- | :--- |\r\n|      |      |      |\r\n|      |      |      |\r\n|      |      |      |\r\n\r\n### 修改文字的颜色\r\n\r\n我在使用富文本的时候经常有一些重点内容会让我标记成特殊的格式，在markdown中支持``标签，我们可以直接使用``标签来改变文字的一些样式\r\n\r\n```markdown\r\n<font face=\"黑体\">我是黑体字</font>\r\n<font face=\"微软雅黑\">我是微软雅黑</font>\r\n<font face=\"STCAIYUN\">我是华文彩云</font>\r\n<font color=red>我是红色</font>\r\n<font color=#008000>我是绿色</font>\r\n<font color=Blue>我是蓝色</font>\r\n<font size=5>我是尺寸</font>\r\n<font face=\"黑体\" color=green size=5>我是黑体，绿色，尺寸为5</font>\r\n```\r\n\r\n我是黑体字\r\n我是微软雅黑\r\n我是华文彩云\r\n我是红色\r\n我是绿色\r\n我是蓝色\r\n我是尺寸\r\n我是黑体，绿色，尺寸为5\r\n\r\n但是``标签并不能改变文字的背景色\r\n\r\n### 修改文字的背景色\r\n\r\n在虽然markdown最终会被转化为HTML，但是对于很多的HTML标签markdown直接当做code块进行处理了，也就是说对于很多HTML标签和属性markdown是不支持的，很不幸style标签和属性就不被markdown支持，更不幸的是就连div span 这些标签页不被支持，所以最后我们只能使用``标签，借助`标签的`bgcolor`属性来实现给文字添加背景色\r\n\r\n背景色是好东西背景色是好东西背景色是好东西背景色是好东西背景色是好东西背景色是好东西背景色是好东西\r\n\r\n但是使用这种方式为文字添加背景色只能在一个新行中，不能将一段文本的某个区域添加背景色，这样一来我在使用富文本的时候使用不同的背景色来区分内容的重要程度的方式就有点行不通了。\r\n\r\n所以最终我选择使用文字高亮来完成这件事，但是文字高亮背景色却只有一种颜色，那么就只能在高亮的同时使用文字的颜色来区分内容的重要程度了。\r\n\r\n文字高亮在Typora中的语法如下\r\n\r\n```markdown\r\n==文字高亮==\r\n<mark>文字高亮</mark>\r\n==<font color=red>带颜色的高亮文字</font>==\r\n==**<font color=red>带颜色并加粗的高亮文字</font>**== \r\n```\r\n\r\n因为我比较喜欢暗色主题，暗色主题中文字的颜色一般是比较偏白色的（其实主要是加粗文字的问题，Typora自带的样式把高亮中的样式覆盖掉了，所以在高亮中看加粗的字体会看不清楚），通过开发者工具查看了Typora渲染之后的文档，发现Typora中加粗使用的是``标签，所以我决定当我使用加粗高亮的字体的时候使用``标签，并且我在自己使用的Typora的主题的样式表中加入了如下的样式：\r\n\r\n```css\r\nmark b {\r\n    color: #000;\r\n}\r\n```\r\n\r\n这样就可以在文字高亮的情况下看清楚，最后，我的高亮带颜色的文字的写法就成了下面这样\r\n\r\n```markdown\r\n==<b><font color=red>红色<font color=blue>嵌套在红色中的蓝色</font>红色</font>默认颜色<font color=blue>单独的蓝色</font></b>==\r\n```\r\n\r\n**红色嵌套在红色中的蓝色红色默认颜色单独的蓝色**\r\n\r\n但是需要注意的是，上面那种`==高亮==`的语法是Typora的扩展语法，如果字节写的文章想要具有更好的灵活性应该使用下面这种写法：\r\n\r\n```markdown\r\n<mark><b><font color=red>红色<font color=blue>嵌套在红色中的蓝色</font>红色</font>默认颜色<font color=blue>单独的蓝色</font></b></mark>\r\n```\r\n\r\n**红色嵌套在红色中的蓝色红色默认颜色单独的蓝色**\r\n\r\n\r\n\r\n可以看到这两种写法的效果是一样的。\r\n\r\n从上面的示例也可以看出，``标签是可以嵌套使用的，这么来说的话除了使用起来麻烦一点，这种使用方式还是可以基本满足我的需求的。\r\n\r\n以上markdown和Typora的使用方式已经基本能够满足我的需求。\r\n\r\n下一篇将会介绍我是如何调教Typora让它使用起来更加舒服，以及如何使用七牛云进行图片的存储。","timestamp":1590329650947},{"name":"217-pip配置国内源.md","path":"3-Mac_typora/217-pip配置国内源.md","content":"- Typora-Mac\n\nAugust 3, 2019 by typora.io\n\n  The latest version of Typora supports macOS ≥ 10.13, for older macOS, 10.11 and 10.12 are not in active support. Support for macOS ≤ 10.10 has ended.\n\n  You could find and download available working versions here:\n\n  - **macOS ≥ 10.13** [latest version](https://typora.io/download/Typora.dmg)\n\n- **macOS 10.11 and 10.12** [0.9.9.26 beta](https://typora.io/download/Typora-0.9.9.26.dmg)\n  \n- macOS 10.10** [0.9.9.25.3 beta]\n  \n\n![img](/xiaohan/typora_book/typora_pic/96.jpeg)\n\n  [erlingmusan](https://www.jianshu.com/u/41bb754329fe)关注\n\n  2017.07.31 00:56:13字数 1,639阅读 752\n\n  # MarkDown-Typora-Mac\n\n  [TOC]\n\n------\n\n  # 1. 概述\n\n  ## 1.1. 宗旨\n\n  **Markdown**的目标是实现「易读易写」。\n\n  **Markdown**语法受到一些既有**text-to-HTML**格式的影响，包括[Setext](https://link.jianshu.com/?t=http://docutils.sourceforge.net/mirror/setext.html)、[atx](https://link.jianshu.com/?t=http://www.aaronsw.com/2002/atx/)、[Textile](https://link.jianshu.com/?t=http://textism.com/tools/textile/)、[reStructuredText](https://link.jianshu.com/?t=http://docutils.sourceforge.net/rst.html)、[Grutatext](https://link.jianshu.com/?t=http://www.triptico.com/software/grutatxt.html)和[EtText](https://link.jianshu.com/?t=http://ettext.taint.org/doc/)，而最大灵感来源其实是纯文本电子邮件的格式。\n\n  ## 1.2. 兼容 HTML\n\n  不在**Markdown**涵盖范围之内的标签，都可以直接在文档里面用**HTML**撰写。不需要额外标注这是**HTML**或是**Markdown**；只要直接加标签就可以了。\n\n  ```xml\n  这是一个普通段落。\n  <table>\n      <tr>\n          <td>Foo</td>\n      </tr>\n  </table>\n  这是另一个普通段落。\n  ```\n\n  请注意，在**HTML**区块标签间的**Markdown**格式语法将不会被处理。比如，你在**HTML**区块内使用**Markdown**样式的**强调**会没有效果。\n\n  ## 1.3. 特殊字符自动转换\n\n  在**HTML**文件中，有两个字符需要特殊处理：`<`和`&`。`<`符号用于起始标签，`&`符号则用于标记**HTML**实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是`<`和`&`。\n\n  `&`字符尤其让网络文档编写者受折磨，如果你要打「AT&T」 ，你必须要写成「AT`&`T」。而网址中的`&`字符也要转换。比如你要链接到：\n\n  ```cpp\n  http://images.google.com/images?num=30&q=larry+bird\n  ```\n\n  你必须要把网址转换写为\n\n  ```cpp\n  http://images.google.com/images?num=30&q=larry+bird\n  ```\n\n  才能放到链接标签的`href`属性里。不用说也知道这很容易忽略，这也可能是**HTML**标准检验所检查到的错误中，数量最多的。\n\n  类似的状况也会发生在`<`符号上，因为**Markdown**允许兼容 HTML，如果你是把`<`符号作为**HTML**标签的定界符使用，那**Markdown**也不会对它做任何转换，但是如果你写：\n\n  ```undefined\n  4 < 5\n  ```\n\n  Markdown 将会把它转换为：\n\n  ```undefined\n  4 < 5\n  ```\n\n  不过需要注意的是，**code**范围内，不论是行内还是区块，`<`和`&`两个符号都**一定**会被转换成**HTML**实体，这项特性让你可以很容易地用**Markdown**写**HTML code**（和**HTML**相对而言，**HTML**语法中，你要把所有的`<`和`&`都转换为**HTML**实体，才能在**HTML**文件里面写出**HTML code**。）\n\n------\n\n  # 2. Key\n\n  - Select word: `cmd+D`\n  - Delete word: `shift+cmd+D`\n  - Select line/sentence: `cmd+L`\n  - Delete line/sentence: `shift+cmd+L`\n  - Select row in table: `cmd+L`\n  - Add row in table: `cmd+Enter`\n  - Select Styled Scope (or cell in a table) `cmd+E`\n  - Jump to selection: `cmd+J`\n  - Jump to Top: `cmd+`\n  - Jump To Bottom: `cmd+↓`\n  - Increase/decrease heading level from `<p>` to `<h1>`: `cmd+-/+`\n  - New line: `shift+Return`\n  - Move table row/column: `⌘ + ⌃ + arrow key`.\n\n------\n\n  # 3. 区块元素\n\n  ## 3.1. 内容目录\n\n  在段落中填写 `[TOC]` 以显示全文内容的目录结构。\n\n  ## 3.2. 段落和换行\n\n  ```\n  Return\n  Shift` + `Return\n  ```\n\n  ## 3.3. 标题\n\n  ```undefined\n  Header 1\n  ========\n  \n  Header 2\n  --------\n  ```\n\n  or\n\n  ```bash\n  # Header 1\n  ## Header 2\n  ###### Header 6\n  ```\n\n  ## 3.4. 区块引用\n\n  > Angle brackets `>` are used for block quotes.\n  > Technically not every line needs to start with a `>` as long as\n  > there are no empty lines between paragraphs.\n  > Looks kinda ugly though.\n  >\n  > > Block quotes can be nested.\n  > >\n  > > > Multiple Levels\n  >\n  > Most markdown syntaxes work inside block quotes.\n  >\n  > - Lists\n  > - [Links](https://link.jianshu.com/?t=http://macdown.uranusjr.com)\n  > - Etc.\n\n  Here is the code:\n\n  ```jsx\n  > Angle brackets `>` are used for block quotes.  \n  Technically not every line needs to start with a `>` as long as\n  there are no empty lines between paragraphs.  \n  > Looks kinda ugly though.\n  > > Block quotes can be nested.  \n  > > > Multiple Levels\n  >\n  > Most markdown syntaxes work inside block quotes.\n  >\n  > * Lists\n  > * [Links][arbitrary_id]\n  > * Etc.\n  ```\n\n  ## 3.5. 列表\n\n  - Lists must be preceded by a blank line (or block element)\n  \n  - Unordered lists start each item with a `*`\n  \n  - `-` works too\n  \n  - Indent a level to make a nested list\n    1. Ordered lists are supported.\n    2. Start each item (number-period-space) like `1.`\n    3. It doesn\'t matter what number you use, I will render them sequentially\n    4. So you might want to start each line with `1.` and let me sort it out\n\n  Here is the code:\n\n  ```go\n  * Lists must be preceded by a blank line (or block element)\n  * Unordered lists start each item with a `*`\n  - `-` works too\n      * Indent a level to make a nested list\n          1. Ordered lists are supported.\n          2. Start each item (number-period-space) like `1. `\n          42. It doesn\'t matter what number you use, I will render them sequentially\n          1. So you might want to start each line with `1.` and let me sort it out\n  ```\n\n  1. [x] I can render checkbox list syntax\n\n  - [x] I support nesting\n  - [x] I support ordered *and* unordered lists\n\n  1. [ ] I don\'t support clicking checkboxes directly in the html window\n\n  ## 3.6. 代码区块\n\n  `Inline code` is indicated by surrounding it with backticks:\n  ``Inline code``  \n  \\```Code with `backticks` ``` (mind the spaces preceding the final set of backticks)\n  多段代码换行+三个```\n\n  ```bash\n  print(\'a\')\n  ```\n\n  多段代码换行+三个`~`\n\n  ```javascript\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  s = \"Python syntax highlighting\"\n  print s\n  ```\n\n  换行+tab\n\n  ```bash\n  print(\'This is a code block\')\n  ```\n\n  ## 3.7. 分隔线\n\n  ```\n  ***` or `---\n  ```\n\n------\n\n  # 4. 区段元素\n\n  ## 4.1. 链接\n\n  [uranusjr@gmail.com](https://link.jianshu.com/?t=mailto:uranusjr@gmail.com)\n  `<uranusjr@gmail.com>`\n  [http://macdown.uranusjr.com](https://link.jianshu.com/?t=http://macdown.uranusjr.com)\n  `<http://macdown.uranusjr.com>`\n  [Macdown Website](https://link.jianshu.com/?t=http://macdown.uranusjr.com)\n  `[Macdown Website](http://macdown.uranusjr.com \"Title\")` (The title is optional)\n\n  ## 4.2. 引用\n\n  Make [a link](https://link.jianshu.com/?t=http://macdown.uranusjr.com) `[a link][arbitrary_id]` then on it\'s own line anywhere else in the file:\n  `[arbitrary_id]: http://macdown.uranusjr.com \"Title\"`\n\n  If the link text itself would make a good id, you can link [like this](https://link.jianshu.com/?t=http://macdown.uranusjr.com) `[like this][]`, then on it\'s own line anywhere else in the file:\n  `[like this]: http://macdown.uranusjr.com`\n\n  ## 4.3. 强调\n\n  **Strong**: `**Strong**` or `__Strong__` (Command-B)\n  *Emphasize*: `*Emphasize*` or `_Emphasize_`[[1\\]](https://www.jianshu.com/p/8121e4d57083#fn1) (Command-I)\n\n  ## 4.4. 图片\n\n  ```\n  ![](path/or/url/to.jpg \"Optional Title\")`\n  `![Alt Image Text][image-id]`\n  on it\'s own line elsewhere:\n  `[image-id]: path/or/url/to.jpg \"Optional Title\"\n  ```\n\n  ## 4.5. 表格\n\n| First Header | Second Header |\n| ------------ | ------------- |\n| Content Cell | Content Cell  |\n| Content Cell | Content Cell  |\n\n  You can align cell contents with syntax like this:\n\n| Left Aligned  | Center Aligned  | Right Aligned |\n| :------------ | :-------------: | ------------: |\n| col 3 is      | some wordy text |         $1600 |\n| col 2 is      |    centered     |           $12 |\n| zebra stripes |    are neat     |            $1 |\n\n  The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.\n\n  ## 4.6. 脚注\n\n  ```css\n  Text prior to footnote reference.[^2]\n  [^2] Comment to include in footnote.\n  H~2~O`, `X~long\\ text~\n  ```\n\n  H2O\n\n  Xlong text\n\n  # 5. 高级\n\n  ## 5.1. 数学\n\n  $ 表示行内公式：\n\n  质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n  $ 表示整行公式：\n\n  $E=mc^2$\n\n  访问 [MathJax](https://link.jianshu.com/?t=http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。\n\n  ## 5.2. 序列图\n\n  主流支持`seq`，typora支持`sequence`\n\n  ```sequence\n  Alice->Bob: Hello Bob, how are you?\n  Note right of Bob: Bob thinks\n  Bob-->Alice: I am good thanks!\n  ```\n\n  **更多语法参考：**[序列图语法](https://link.jianshu.com/?t=https://bramp.github.io/js-sequence-diagrams/#syntax)\n\n  \n\n  ![img](/xiaohan/typora/624.png)\n\n  \n\n  ## 5.3. 流程图\n\n  ```flow\n  st=>start: Start\n  op=>operation: Your Operation\n  cond=>condition: Yes or No?\n  e=>end\n  \n  st->op->cond\n  cond(yes)->e\n  cond(no)->op\n  ```\n\n  **更多语法参考：**[流程图语法](https://link.jianshu.com/?t=http://flowchart.js.org/)\n\n  ## 5.4. Mermaid\n\n  ### Sequence\n\n  ```mermaid\n  %% Example of sequence diagram\n    sequenceDiagram\n  \n      Alice->>Bob: Hello Bob, how are you?\n      alt is sick\n      Bob->>Alice: Not so good :(\n      else is well\n      Bob->>Alice: Feeling fresh like a daisy\n      end\n      opt Extra response\n      Bob->>Alice: Thanks for asking\n      end\n  ```\n\n  **更多语法参考：**[Mermaid-Sequence](https://link.jianshu.com/?t=https://knsv.github.io/mermaid/#sequence-diagrams)\n\n  ### Flowchart\n\n  ```mermaid\n  graph LR\n  A[Hard edge] -->B(Round edge)\n      B --> C{Decision}\n      C -->|One| D[Result one]\n      C -->|Two| E[Result two]\n  ```\n\n  **更多语法参考：**[Mermaid-Flowchart](https://link.jianshu.com/?t=https://knsv.github.io/mermaid/#flowcharts-basic-syntax)\n\n  ### Gantt\n\n  ```mermaid\n  %% Example with slection of syntaxes\n          gantt\n          dateFormat  YYYY-MM-DD\n          title Adding GANTT diagram functionality to mermaid\n      \n          section A section\n          Completed task            :done,    des1, 2014-01-06,2014-01-08\n          Active task               :active,  des2, 2014-01-09, 3d\n          Future task               :         des3, after des2, 5d\n          Future task2               :         des4, after des3, 5d\n      \n          section Critical tasks\n          Completed task in the critical line :crit, done, 2014-01-06,24h\n          Implement parser and jison          :crit, done, after des1, 2d\n          Create tests for parser             :crit, active, 3d\n          Future task in critical line        :crit, 5d\n          Create tests for renderer           :2d\n          Add to mermaid                      :1d\n      \n          section Documentation\n          Describe gantt syntax               :active, a1, after des1, 3d\n          Add gantt diagram to demo page      :after a1  , 20h\n          Add another diagram to demo page    :doc1, after a1  , 48h\n      \n          section Last section\n          Describe gantt syntax               :after doc1, 3d\n          Add gantt diagram to demo page      : 20h\n          Add another diagram to demo page    : 48h\n  ```\n\n  **更多语法参考：**[Mermaid-Gantt](https://link.jianshu.com/?t=https://knsv.github.io/mermaid/#gant-diagrams)\n\n  # 6 其它\n\n  ## 6.1. 语法表格列表\n\n  The following is a list of optional inline markups supported:\n\n| Option name                                                  | Markup                                                 | Result if enabled                                      |      |\n| ------------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ---- |\n| Intra-word emphasis                                          | So A*maz*ing                                           | So A *maz* ing                                         |      |\n| Strikethrough                                                | ~~Much wow~~                                           | ~~Much wow~~                                           |      |\n| Underline [[2\\]](https://www.jianshu.com/p/8121e4d57083#fn2) | _So doge_                                              | <u>So doge</u>                                         |      |\n| Quote [[3\\]](https://www.jianshu.com/p/8121e4d57083#fn3)     | \"Such editor\"                                          | \"Such editor“                                          |      |\n| Highlight                                                    | ==So good==                                            | ==So good==                                            |      |\n| Superscript                                                  | hoge^(fuga)                                            | hogefuga                                               |      |\n| Autolink                                                     | [http://t.co](https://link.jianshu.com/?t=http://t.co) | [http://t.co](https://link.jianshu.com/?t=http://t.co) |      |\n| Footnotes                                                    | [^4] and [^4]:                                         | and footnote[^4]                                       |      |\n\n  4You don\'t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes.\n\n  **Markdown**支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n  ```csharp\n  \\   反斜线\n  `   反引号\n  *   星号\n  _   底线\n  {}  花括号\n  []  方括号\n  ()  括弧\n  #   井字号\n  +   加号\n  -   减号\n  .   英文句点\n  !   惊叹号\n  ```\n\n  ## 6.2. Jekyll front-matter\n\n  ```css\n  ---\n  title: \"Macdown is my friend\"\n  date: 2014-06-06 20:00:00\n  ---\n  ```\n\n  ## 6.3. 特殊符号 HTML Entities Codes\n\n  © & ¨ ™ ¡ £\n  & < > ¥ € ® ± ¶ § ¦ ¯ « ·\n\n  X² Y³ ¾ ¼ × ÷ »\n\n  18ºC \" \'\n\n  ## 6.4. Emoji表情 :smiley:\n\n  > Blockquotes :star:\n\n  ### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n  - [x] :smiley: @mentions, :smiley: #refs, [links](https://www.jianshu.com/p/8121e4d57083), **formatting**, and <del>tags</del> supported :editormd-logo:;\n  - [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n  - [x] [ ] :smiley: this is a complete item :smiley:;\n  - [ ] []this is an incomplete item [test link](https://www.jianshu.com/p/8121e4d57083#) :fa-star: @pandao;\n  - [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](https://www.jianshu.com/p/8121e4d57083#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is :fa-star: :fa-gear: an incomplete item [test link](https://www.jianshu.com/p/8121e4d57083#);\n\n------\n\n  1. If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized [↩](https://www.jianshu.com/p/8121e4d57083#fnref1)\n  2. If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined. [↩](https://www.jianshu.com/p/8121e4d57083#fnref2)\n  3. **Quote** replaces literal `\"` characters with html `<q>` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote**is different from *blockquote*, which is part of standard Markdown. [↩](https://www.jianshu.com/p/8121e4d57083#fnref3)\n\n- https://typora.io/download/Typora-0.9.9.25.3.dmg)","timestamp":1590329650947},{"name":"218-快速启动工具Alfred入门使用.md","path":"3-Mac_typora/218-快速启动工具Alfred入门使用.md","content":"# 效率人生 MAC必备工具Alfred入门使用\n\n# 前言\n\n- Alfred，想必大家就算没用过也耳闻过。Alfred是一个让你可以丢掉鼠标的神器。Alfred 是 Mac 系统上一款专注于效率提升的著名应用，它能帮你快速打开网页、快速进行自定义搜索、查看剪贴板历史、快速查询单词等等。Alfred 提供的功能虽然很多，但目的只有一个 —— 那就是减少我们工作中的一些重复动作，提升我们的工作效率。\n- 从界面上分，Alfred分为`设置界面`和`操作界面`；从功能上分，Alfred分为基本**搜索和快速启动**的功能，以及工使用**自定义插件**的工作流workflow功能。\n\n# 如何获取Alfred\n\n- 从[Alfred官网](https://www.alfredapp.com/)中下载Alfred并安装使用即可.![image-20191211205710399](/xiaohan/typora_book/typora_pic/image-20191211205710399.png)\n- 或者从`App Store直接安装`\n\n1. 注意，免费用户只能使用其Features中的功能(即**基本搜索和快速启动应用等功能，其实这已满足非重度使用者日常需求**)；\n2. 若要使用Workflows(即自定义插件的工作流)，则需要购买Powerpack才能激活此功能。\n\n- 购买Powerpack后，可以在设置界面的Powerpack子界面中看到下图，表明可以使用Alfred的所有功能，包括工作流。只有购买powerpack后，才能使用workflow。\n\n\n\n# 如何打开Alfred\n\n## 打开设置界面\n\n- Alfred启动后，在Mac上方菜单栏上会有其图标，左键点击后选择`Preferences...`即可打开Alfred的设置界面。\n\n- 可以看到Alfred的设置界面主要分为以下几个部分：\n\n  ##### 1. General：通用；\n\n  ##### 2. Features：特性；\n\n  ##### 3. Workflows：工作流；\n\n  ##### 4. Appearance：外观；\n\n  ##### 5. Advanced 增强\n\n  ##### 6. Remote 远程\n\n  ##### 7. Powerpack：查看是否购买Powerpack以及其许可证。\n\n  ##### 8. Usage\n\n## 打开操作界面\n\n- 调出Alfred操作界面的默认热键为`Alt + 空格`。这个可以设置自己习惯的快捷键。\n\n# General（通用界面）\n\n![image-20191211205819775](/xiaohan/typora_book/typora_pic/image-20191211205819775.png) \n\n- General界面主要是以下三个功能\n  1. Startup：是否在系统启动时自启动Alfred。神器，默认勾上，不解释。\n  2. Alfred Hotkey：调出Alfred操作界面的热键。默认为**Alt + 空格**。我这里修改为 **cmd + space**\n  3. Where are you：你在哪个国家。Alfred内置了常用网站搜索功能，在搜索时打开对应国家的网站。\n\n# Features（特性界面）\n\n![img](/xiaohan/typora_book/typora_pic/webp-20191211204445471)\n\n- Alfred几乎所有搜索功能都在这个界面设置。免费用户(没有购买Powerpack开启Workflows)重点关注的地方了。\n- Features包含的所有功能,如上图。 下面详细的介绍具体的使用。\n\n### Default Results（默认结果）\n\n![image-20191211205844635](/xiaohan/typora_book/typora_pic/image-20191211205844635.png)\n\n1. Essentials：可设置搜索“应用程序”、“联系人”、“设置”、“Safari书签”。\n\n2. Extras：可设置搜索“文件夹”、“文本文件”、“压缩文件”、“个人文档目录”、“图片”、“AppleScript”等其他文件。\n\n3. Unintelligent：`Search all file types`搜索所有文件类型。若勾选此项不但影响巡查速度，还混淆默认搜索结果。**Alfred建议用户使用Find+空格+文件名来查询文件或文件夹；使用Open+空格+文件名也可以。**\n\n   ![image-20191211205908756](/xiaohan/typora_book/typora_pic/image-20191211205908756.png) \n\n   \n\n1. Search Scope：设置Alfred查询时会**搜索的文件夹范围**，可自己添加和删除。\n\n2. Fallbacks：若上面的查询搜索不到结果时，就会调用这里设置的网站或搜索引擎来进行进一步的查询。默认反馈结果为Google、Amazon、Wikipedia网页搜索。\n\n   ![image-20191211205955523](/xiaohan/typora_book/typora_pic/image-20191211205955523.png) \n\n   - 可点击界面右下角的`+`来添加更多的搜索引擎。\n\n------\n\n- 检索Chrome书签：目前Alfred只可检索Safari的书签，若你想检索Chrome的书签。则需要将Chrome书签导入到Safari中。导入步骤为：**打开Safari -> 菜单【文件】 -> 【导入自】 -> 谷歌Chrome导入书签数据**。\n- 检索外置硬盘：添加外置硬盘的根目录或拖动其根目录到**Search Scope**中。\n\n## Web Search（网页搜索）\n\n![image-20191211210019012](/xiaohan/typora_book/typora_pic/image-20191211210019012.png) \n\n- Keyword为Alfred命令/关键字；DisplayText为此搜索功能的标题；Custom有图标表示这个为用户自定义；Enabled为是否启用。\n\n- Alfred网站搜索的设置，这是本人使用最频繁的功能。在图中可看到Alfred默认设置了很多搜索网站，但几乎都是国外网站，因为天朝特色，很多都是我们用不上，因此需要添加自定义的搜索设置。\n\n  1. 点击右下角的`Add Custom Search`。\n\n  2. 根据下面的示意图在弹出界面中输入对应信息，其中网站图标可忽略，然后保存即可。\n\n  3. 比如我自定义的百度搜索，信息如下：\n\n     1. Search URL为\n\n        \n\n        ```cpp\n        https://www.baidu.com/s?wd={query}\n        ```\n\n     2. Title为`baidu`。\n\n     3. Keyword为`baidu`。\n\n     4. Validation为`alfredapp`，此项可随意。\n\n        ![image-20191211210042681](/xiaohan/typora_book/typora_pic/image-20191211210042681.png) \n\n        \n\n  4. 在Alfred上使用刚自定义的百度搜索，输入`baidu+空格+查询内容`，回车即自动打开百度进行搜索。\n\n     ![image-20191211210121980](/xiaohan/typora_book/typora_pic/image-20191211210121980.png) \n\n- 只要在对应的网站上搜索一次，记下当时的网址，并把具体的搜索内容改为\n\n  ```\n  {query}\n  ```\n\n  就可以找到我们自定义搜索设置中所需要的\n\n  ```\n  Search URL\n  ```\n\n  信息了。于是，本人提供我常用的一些自定义搜索配置。\n\n  - 百度：`https://www.baidu.com/s?ie=utf-8&f=8&wd={query}`\n  - 简书：`http://www.jianshu.com/search?utf8=%E2%9C%93&q={query}`\n  - 淘宝：`http://s.taobao.com/search?oe=utf-8&f=8&q={query}`\n  - 京东：`https://search.jd.com/Search?keyword={query}&enc=utf-8&wq={query}`\n  - 微信文章：`http://weixin.sogou.com/weixin?type=2&query={query}`\n  - stackoverflow：`http://www.stackoverflow.com/search?q={query}`\n  - github：`https://github.com/search?utf8=%E2%9C%93&q={query}`\n  - maven：`http://mvnrepository.com/search?q={query}`\n  - Android API Search：`https://developer.android.com/reference/classes.html#q={query}`\n\n## Clipboard（剪切板）\n\n剪贴板增强工具是我强烈推荐的，提高效率杠杆的。\n\n\n\n![img](/xiaohan/typora_book/typora_pic/webp-20191211204445513)\n\n- 开启Alfred的剪切板功能。\n\n- 查看Alfred剪切板历史记录。默认热键为`Command + Alt + C`， 我修改为`Command + L`。\n\n  ![img](/xiaohan/typora_book/typora_pic/webp-20191211204445616)\n\n  \n\n- 清空Alfred剪切板。在Alfred**操作界面**中输入clear。\n\n## 1password\n\n1password一款密码管理工具，这里开启的话，就会直接和1password打通，网页直接打开登录。\n\n\n\n![img](/xiaohan/typora_book/typora_pic/webp-20191211204445558)\n\ni\n\n## system\n\n系统命令快捷方式\n\n![img](/xiaohan/typora_book/typora_pic/webp-20191211204445570)\n\n## Terminal / Shell\n\n终端，程序员必用的软件,这里使用系统的终端。我改为iterm2，修改脚本的如下：\n\n\n\n```bash\n-- This is v0.7 of the custom script for AlfredApp for iTerm 3.1.1+\n-- created by Sinan Eldem www.sinaneldem.com.tr\n\non alfred_script(q)\n    if application \"iTerm2\" is running or application \"iTerm\" is running then\n        run script \"\n            on run {q}\n                tell application \\\"iTerm\\\"\n                    activate\n                    try\n                        select first window\n                        set onlywindow to true\n                    on error\n                        create window with default profile\n                        select first window\n                        set onlywindow to true\n                    end try\n                    tell the first window\n                        if onlywindow is false then\n                            create tab with default profile\n                        end if\n                        tell current session to write text q\n                    end tell\n                end tell\n            end run\n        \" with parameters {q}\n    else\n        run script \"\n            on run {q}\n                tell application \\\"iTerm\\\"\n                    activate\n                    try\n                        select first window\n                    on error\n                        create window with default profile\n                        select first window\n                    end try\n                    tell the first window\n                        tell current session to write text q\n                    end tell\n                end tell\n            end run\n        \" with parameters {q}\n    end if\nend alfred_script\n```\n\n演示：\n\n\n\n![img](/xiaohan/typora_book/typora_pic/webp-20191211204445625)\n\n# Advanced（高级设置）\n\n- 打开Alfred的设置界面，点击顶部菜单中的Advanced。\n\n  ![img](/xiaohan/typora_book/typora_pic/webp-20191211204445591)\n\n## 配置同步\n\n- 点击`Set sync folder...`设置Alfred配置导出的目录。点击`Reveal in Finder`查看Alfred配置所在的目录。\n\n![img](/xiaohan/typora_book/typora_pic/webp-20191211204445619)\n\n- 只要将Alfred配置导出的目录设置为Dropbox同步目录，就可以实现云同步。\n\n## 下期预告\n\n**workflow与alfred进阶**","timestamp":1590329650947},{"name":"219-窗口分屏软件magnet如何使用.md","path":"3-Mac_typora/219-窗口分屏软件magnet如何使用.md","content":"# Magnet如何使用\n\nMagnet是Mac平台众多窗口管理应用中极为优秀的一款，使用它可以很方便地调整窗口的大小全屏半屏。下面由小编说说它的设置以及基本的使用方法。\n\n## 工具/原料\n\n- Magnet for Mac\n- MacBook Pro\n\n## 方法/步骤\n\n1. 1\n\n   安装Magnet后，还不能实现，首先是要设置一下，给予权限，点击偏好设置。\n\n   [![Magnet如何使用怎么用](/xiaohan/typora_book/typora_pic/8644ebf81a4c510f7c6549fb6a59252dd52aa5aa-20191212214545437.jpg)](http://jingyan.baidu.com/album/f25ef254a39fbf482c1b8296.html?picindex=2)\n\n   [![Magnet如何使用怎么用](/xiaohan/typora_book/typora_pic/ae51f3deb48f8c547f636ece30292df5e1fe7f9b-20191212214545442.jpg)](http://jingyan.baidu.com/album/f25ef254a39fbf482c1b8296.html?picindex=3)\n\n2. 2\n\n   找到安全与隐私，点击进去后在下图，点金黄色小锁头，输入管理员密码。把右侧方框内的蓝色图标勾选上去。\n\n   [![Magnet如何使用怎么用](/xiaohan/typora_book/typora_pic/cefc1e178a82b901110868d2798da9773812efae-20191212214545443.jpg)](http://jingyan.baidu.com/album/f25ef254a39fbf482c1b8296.html?picindex=4)\n\n3. 3\n\n   再次打开Magnet，登录时启动勾选上去，进去软件后没有主界面的。\n\n   [![Magnet如何使用怎么用](/xiaohan/typora_book/typora_pic/5bafa40f4bfbfbede0ae9d9e72f0f736aec31f5f-20191212214545454.jpg)](http://jingyan.baidu.com/album/f25ef254a39fbf482c1b8296.html?picindex=5)\n\n4. 4\n\n   使用方法，先点击菜单栏上面的Magnet小图标，把窗口拖入对应的文字就可以了。或者记忆快捷键control+option+方向键+字母都是这种组合，在窗口上按对应的快捷键就会缩放或放大到对应的大小。使用起来十分的方法，推荐使用快捷键的方法调整窗口。\n\n   [![Magnet如何使用怎么用](/xiaohan/typora_book/typora_pic/f11f3a292df5e0fe765723e0566034a85fdf7280-20191212214545450.jpg)](http://jingyan.baidu.com/album/f25ef254a39fbf482c1b8296.html?picindex=6)\n\n   END\n\n经验内容","timestamp":1590329650947}]