if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m6']=[{"name":"227-python语音识别指南.md","path":"6-windows语音识别/227-python语音识别指南.md","content":"\r\n python语音识别指南终极版\r\n\r\n\r\n#### 【导读】亚马逊的 Alexa 的巨大成功已经证明：在不远的将来，实现一定程度上的语音支持将成为日常科技的基本要求。整合了语音识别的 Python 程序提供了其他技术无法比拟的交互性和可访问性。最重要的是，在 Python 程序中实现语音识别非常简单。阅读本指南，你就将会了解。你将学到：\r\n\r\n\r\n•语音识别的工作原理；\r\n\r\n•PyPI 支持哪些软件包; \r\n\r\n•如何安装和使用 SpeechRecognition 软件包——一个功能全面且易于使用的 Python 语音识别库。\r\n\r\n\r\n\r\n## ▌语言识别工作原理概述\r\n\r\n\r\n\r\n语音识别源于 20 世纪 50 年代早期在贝尔实验室所做的研究。早期语音识别系统仅能识别单个讲话者以及只有约十几个单词的词汇量。现代语音识别系统已经取得了很大进步，可以识别多个讲话者，并且拥有识别多种语言的庞大词汇表。\r\n\r\n\r\n\r\n\r\n语音识别的首要部分当然是语音。通过麦克风，语音便从物理声音被转换为电信号，然后通过模数转换器转换为数据。一旦被数字化，就可适用若干种模型，将音频转录为文本。\r\n\r\n\r\n\r\n大多数现代语音识别系统都依赖于隐马尔可夫模型（HMM）。其工作原理为：语音信号在非常短的时间尺度上（比如 10 毫秒）可被近似为静止过程，即一个其统计特性不随时间变化的过程。\r\n\r\n\r\n\r\n\r\n许多现代语音识别系统会在 HMM 识别之前使用神经网络，通过特征变换和降维的技术来简化语音信号。也可以使用语音活动检测器（VAD）将音频信号减少到可能仅包含语音的部分。\r\n\r\n\r\n\r\n\r\n幸运的是，对于 Python 使用者而言，一些语音识别服务可通过 API 在线使用，且其中大部分也提供了 Python SDK。 \r\n\r\n\r\n\r\n## ▌选择 Python 语音识别包\r\n\r\n\r\n\r\nPyPI中有一些现成的语音识别软件包。其中包括：\r\n\r\n\r\n\r\n•apiai\r\n\r\n•google-cloud-speech\r\n\r\n•pocketsphinx\r\n\r\n•SpeechRcognition\r\n\r\n•watson-developer-cloud\r\n\r\n•wit\r\n\r\n\r\n\r\n\r\n一些软件包（如 wit 和 apiai ）提供了一些超出基本语音识别的内置功能，如识别讲话者意图的自然语言处理功能。其他软件包，如谷歌云语音，则专注于语音向文本的转换。\r\n\r\n\r\n\r\n其中，SpeechRecognition 就因便于使用脱颖而出。\r\n\r\n\r\n\r\n\r\n识别语音需要输入音频，而在 SpeechRecognition 中检索音频输入是非常简单的，它无需构建访问麦克风和从头开始处理音频文件的脚本，只需几分钟即可自动完成检索并运行。\r\n\r\n\r\n\r\n\r\nSpeechRecognition 库可满足几种主流语音 API ，因此灵活性极高。其中 Google Web Speech API 支持硬编码到 SpeechRecognition 库中的默认 API 密钥，无需注册就可使用。SpeechRecognition 以其灵活性和易用性成为编写 Python 程序的最佳选择。\r\n\r\n\r\n\r\n## ▌安装 SpeechRecognation\r\n\r\n\r\n\r\nSpeechRecognition 兼容 Python2.6 , 2.7 和 3.3+，但若在 Python 2 中使用还需要一些额外的安装步骤。本教程中所有开发版本默认 Python 3.3+。\r\n\r\n\r\n读者可使用 pip 命令从终端安装 SpeechRecognition：\r\n\r\n\r\n\r\n\r\n$ pip install SpeechRecognition\r\n\r\n\r\n\r\n安装完成后请打开解释器窗口并输入以下内容来验证安装：\r\n\r\n\r\n\r\n\r\n>>> import speech_recognition as sr\r\n>>> sr.__version__\r\n\'3.8.1\'\r\n\r\n\r\n注：不要关闭此会话，在后几个步骤中你将要使用它。\r\n\r\n\r\n\r\n\r\n若处理现有的音频文件，只需直接调用 SpeechRecognition ，注意具体的用例的一些依赖关系。同时注意，安装 PyAudio 包来获取麦克风输入。\r\n\r\n\r\n\r\n## ▌识别器类\r\n\r\n\r\n\r\nSpeechRecognition 的核心就是识别器类。\r\n\r\n\r\n\r\n\r\nRecognizer API 主要目是识别语音，每个 API 都有多种设置和功能来识别音频源的语音，分别是：\r\n\r\n\r\n\r\nrecognize_bing(): Microsoft Bing Speech\r\n\r\nrecognize_google(): Google Web Speech API\r\n\r\nrecognize_google_cloud(): Google Cloud Speech - requires installation of the google-cloud-speech package\r\n\r\nrecognize_houndify(): Houndify by SoundHound\r\n\r\nrecognize_ibm(): IBM Speech to Text\r\n\r\nrecognize_sphinx(): CMU Sphinx - requires installing PocketSphinx\r\n\r\nrecognize_wit(): Wit.ai\r\n\r\n\r\n\r\n以上七个中只有 recognition_sphinx（）可与CMU Sphinx 引擎脱机工作， 其他六个都需要连接互联网。\r\n\r\n\r\n\r\n\r\nSpeechRecognition 附带 Google Web Speech API 的默认 API 密钥，可直接使用它。其他六个 API 都需要使用 API 密钥或用户名/密码组合进行身份验证，因此本文使用了 Web Speech API。\r\n\r\n\r\n\r\n现在开始着手实践，在解释器会话中调用 recognise_google（）函数。\r\n\r\n\r\n\r\n>>> r.recognize_google()\r\n\r\n\r\n屏幕会出现：\r\n\r\n\r\n\r\nTraceback (most recent call last):\r\nFile \"\", line 1, in <module>\r\nTypeError: recognize_google() missing 1 required positional argument: \'audio_data\'\r\n\r\n\r\n相信你已经猜到了结果，怎么可能从空文件中识别出数据呢？\r\n\r\n\r\n这 7 个 recognize_*()  识别器类都需要输入 audio_data 参数，且每种识别器的 audio_data 都必须是 SpeechRecognition 的 AudioData 类的实例。\r\n\r\n\r\n\r\nAudioData 实例的创建有两种路径：音频文件或由麦克风录制的音频，先从比较容易上手的音频文件开始。\r\n\r\n\r\n\r\n## ▌音频文件的使用\r\n\r\n\r\n\r\n首先需要下载音频文件（https://github.com/realpython/python-speech-recognition/tree/master/audio_files），保存到 Python 解释器会话所在的目录中。\r\n\r\n\r\n\r\n\r\nAudioFile 类可以通过音频文件的路径进行初始化，并提供用于读取和处理文件内容的上下文管理器界面。\r\n\r\n\r\n\r\n\r\n支持文件类型\r\n\r\n\r\n\r\n SpeechRecognition 目前支持的文件类型有：\r\n\r\nWAV: 必须是 PCM/LPCM 格式\r\n\r\nAIFF\r\n\r\nAIFF-C\r\n\r\nFLAC: 必须是初始 FLAC 格式；OGG-FLAC 格式不可用\r\n\r\n\r\n\r\n若是使用 Linux 系统下的 x-86 ，macOS 或者是 Windows 系统，需要支持 FLAC文件。若在其它系统下运行，需要安装 FLAC 编码器并确保可以访问 flac 命令。\r\n\r\n\r\n\r\n使用 record() 从文件中获取数据\r\n\r\n\r\n\r\n在解释器会话框键入以下命令来处理 “harvard.wav” 文件的内容：\r\n\r\n\r\n\r\n>>> harvard = sr.AudioFile(\'harvard.wav\')\r\n>>> with harvard as source:\r\n...  audio = r.record(source)\r\n...\r\n\r\n\r\n通过上下文管理器打开文件并读取文件内容，并将数据存储在 AudioFile 实例中，然后通过 record（）将整个文件中的数据记录到 AudioData 实例中，可通过检查音频类型来确认：\r\n\r\n\r\n\r\n>>> type(audio)\r\n<class \'speech_recognition.AudioData\'>\r\n\r\n\r\n现在可以调用 recognition_google（）来尝试识别音频中的语音。\r\n\r\n\r\n\r\n>>> r.recognize_google(audio)\r\n\'the stale smell of old beer lingers it takes heat\r\nto bring out the odor a cold dip restores health and\r\nzest a salt pickle taste fine with ham tacos al\r\nPastore are my favorite a zestful food is the hot\r\ncross bun\'\r\n\r\n\r\n以上就完成了第一个音频文件的录制。\r\n\r\n\r\n\r\n利用偏移量和持续时间获取音频片段\r\n\r\n\r\n\r\n\r\n若只想捕捉文件中部分演讲内容该怎么办？record() 命令中有一个 duration 关键字参数，可使得该命令在指定的秒数后停止记录。\r\n\r\n\r\n例如，以下内容仅获取文件前四秒内的语音：\r\n\r\n\r\n\r\n>>> with harvard as source:\r\n...  audio = r.record(source, duration=4)\r\n...\r\n>>> r.recognize_google(audio)\r\n\'the stale smell of old beer lingers\'\r\n\r\n\r\n\r\n在with块中调用record() 命令时，文件流会向前移动。这意味着若先录制四秒钟，再录制四秒钟，则第一个四秒后将返回第二个四秒钟的音频。\r\n\r\n\r\n\r\n>>> with harvard as source:\r\n...  audio1 = r.record(source, duration=4)\r\n...  audio2 = r.record(source, duration=4)\r\n...\r\n>>> r.recognize_google(audio1)\r\n\'the stale smell of old beer lingers\'\r\n>>> r.recognize_google(audio2)\r\n\'it takes heat to bring out the odor a cold dip\'\r\n\r\n\r\n除了指定记录持续时间之外，还可以使用 offset 参数为 record() 命令指定起点，其值表示在开始记录的时间。如：仅获取文件中的第二个短语，可设置 4 秒的偏移量并记录 3 秒的持续时间。\r\n\r\n\r\n\r\n\r\n>>> with harvard as source:\r\n...  audio = r.record(source, offset=4, duration=3)\r\n...\r\n>>> recognizer.recognize_google(audio)\r\n\'it takes heat to bring out the odor\'\r\n\r\n\r\n在事先知道文件中语音结构的情况下，offset 和 duration 关键字参数对于分割音频文件非常有用。但使用不准确会导致转录不佳。\r\n\r\n\r\n\r\n\r\n>>> with harvard as source:\r\n...  audio = r.record(source, offset=4.7, duration=2.8)\r\n...\r\n>>> recognizer.recognize_google(audio)\r\n\'Mesquite to bring out the odor Aiko\'\r\n\r\n\r\n本程序从第 4.7 秒开始记录，从而使得词组 “it takes heat to bring out the odor” ，中的 “it t” 没有被记录下来，此时 API 只得到 “akes heat” 这个输入，而与之匹配的是 “Mesquite” 这个结果。\r\n\r\n\r\n\r\n同样的，在获取录音结尾词组 “a cold dip restores health and zest” 时 API 仅仅捕获了 “a co” ，从而被错误匹配为 “Aiko” 。\r\n\r\n\r\n\r\n噪音也是影响翻译准确度的一大元凶。上面的例子中由于音频文件干净从而运行良好，但在现实中，除非事先对音频文件进行处理，否则不可能得到无噪声音频。\r\n\r\n\r\n\r\n## 噪声对语音识别的影响\r\n\r\n \r\n\r\n噪声在现实世界中确实存在，所有录音都有一定程度的噪声，而未经处理的噪音可能会破坏语音识别应用程序的准确性。\r\n\r\n\r\n\r\n要了解噪声如何影响语音识别，请下载 “jackhammer.wav” （https://github.com/realpython/python-speech-recognition/tree/master/audio_files）文件，并确保将其保存到解释器会话的工作目录中。文件中短语 “the stale smell of old beer lingers” 在是很大钻墙声的背景音中被念出来。\r\n\r\n\r\n\r\n\r\n尝试转录此文件时会发生什么？\r\n\r\n\r\n\r\n\r\n>>> jackhammer = sr.AudioFile(\'jackhammer.wav\')\r\n>>> with jackhammer as source:\r\n...  audio = r.record(source)\r\n...\r\n>>> r.recognize_google(audio)\r\n\'the snail smell of old gear vendors\'\r\n\r\n\r\n\r\n那么该如何处理这个问题呢？可以尝试调用 Recognizer 类的adjust_for_ambient_noise（）命令。\r\n\r\n\r\n\r\n\r\n>>> with jackhammer as source:\r\n...  r.adjust_for_ambient_noise(source)\r\n...  audio = r.record(source)\r\n...\r\n>>> r.recognize_google(audio)\r\n\'still smell of old beer vendors\'\r\n\r\n\r\n\r\n这样就与准确结果接近多了，但精确度依然存在问题，而且词组开头的 “the” 被丢失了，这是什么原因呢？\r\n\r\n\r\n\r\n\r\n因为使用 adjust_for_ambient_noise（）命令时，默认将文件流的第一秒识别为音频的噪声级别，因此在使用 record（）获取数据前，文件的第一秒已经被消耗了。\r\n\r\n\r\n\r\n可使用duration关键字参数来调整adjust_for_ambient_noise（）命令的时间分析范围，该参数单位为秒，默认为 1，现将此值降低到 0.5。\r\n\r\n\r\n\r\n\r\n>>> with jackhammer as source:\r\n...  r.adjust_for_ambient_noise(source, duration=0.5)\r\n...  audio = r.record(source)\r\n...\r\n>>> r.recognize_google(audio)\r\n\'the snail smell like old Beer Mongers\'\r\n\r\n\r\n现在我们就得到了这句话的 “the”，但现在出现了一些新的问题——有时因为信号太吵，无法消除噪音的影响。\r\n\r\n\r\n\r\n若经常遇到这些问题，则需要对音频进行一些预处理。可以通过音频编辑软件，或将滤镜应用于文件的 Python 包（例如SciPy）中来进行该预处理。处理嘈杂的文件时，可以通过查看实际的 API 响应来提高准确性。大多数 API 返回一个包含多个可能转录的 JSON 字符串，但若不强制要求给出完整响应时，recognition_google（）方法始终仅返回最可能的转录字符。\r\n\r\n\r\n\r\n通过把 recognition_google（）中 True 参数改成 show_all 来给出完整响应。\r\n\r\n\r\n\r\n>>> r.recognize_google(audio, show_all=True)\r\n{\'alternative\': [\r\n{\'transcript\': \'the snail smell like old Beer Mongers\'},\r\n{\'transcript\': \'the still smell of old beer vendors\'},\r\n{\'transcript\': \'the snail smell like old beer vendors\'},\r\n{\'transcript\': \'the stale smell of old beer vendors\'},\r\n{\'transcript\': \'the snail smell like old beermongers\'},\r\n{\'transcript\': \'destihl smell of old beer vendors\'},\r\n{\'transcript\': \'the still smell like old beer vendors\'},\r\n{\'transcript\': \'bastille smell of old beer vendors\'},\r\n{\'transcript\': \'the still smell like old beermongers\'},\r\n{\'transcript\': \'the still smell of old beer venders\'},\r\n{\'transcript\': \'the still smelling old beer vendors\'},\r\n{\'transcript\': \'musty smell of old beer vendors\'},\r\n{\'transcript\': \'the still smell of old beer vendor\'}\r\n], \'final\': True}\r\n\r\n\r\n\r\n可以看到，recognition_google（）返回了一个关键字为 \'alternative\' 的列表，指的是所有可能的响应列表。此响应列表结构会因 API 而异且主要用于对结果进行调试。\r\n\r\n\r\n\r\n\r\n\r\n## ▌麦克风的使用\r\n\r\n\r\n\r\n若要使用 SpeechRecognizer 访问麦克风则必须安装 PyAudio 软件包，请关闭当前的解释器窗口，进行以下操作：\r\n\r\n\r\n\r\n\r\n安装 PyAudio\r\n\r\n\r\n\r\n安装 PyAudio 的过程会因操作系统而异。\r\n\r\n\r\n\r\n\r\nDebian Linux\r\n\r\n如果使用的是基于 Debian的Linux（如 Ubuntu ），则可使用 apt 安装 PyAudio：\r\n\r\n\r\n\r\n\r\n$ sudo apt-get install python-pyaudio python3-pyaudio\r\n\r\n\r\n安装完成后可能仍需要启用 pip install pyaudio ，尤其是在虚拟情况下运行。\r\n\r\n\r\n\r\n\r\nmacOS\r\n\r\nmacOS 用户则首先需要使用 Homebrew 来安装 PortAudio，然后调用 pip 命令来安装 PyAudio。\r\n\r\n\r\n\r\n\r\n$ brew install portaudio\r\n$ pip install pyaudio\r\n\r\n\r\n\r\nWindows\r\n\r\nWindows 用户可直接调用 pip 来安装 PyAudio。\r\n\r\n\r\n\r\n\r\n$ pip install pyaudio\r\n\r\n\r\n\r\n安装测试\r\n\r\n安装了 PyAudio 后可从控制台进行安装测试。\r\n\r\n\r\n\r\n\r\n$ python -m speech_recognition\r\n\r\n\r\n请确保默认麦克风打开并取消静音，若安装正常则应该看到如下所示的内容：\r\n\r\n\r\n\r\n\r\nA moment of silence, please...\r\nSet minimum energy threshold to 600.4452854381937\r\nSay something!\r\n\r\n\r\n请对着麦克风讲话并观察 SpeechRecognition 如何转录你的讲话。\r\n\r\n\r\n\r\n\r\nMicrophone 类\r\n\r\n\r\n\r\n请打开另一个解释器会话，并创建识一个别器类的例子。\r\n\r\n\r\n\r\n>>> import speech_recognition as sr\r\n>>> r = sr.Recognizer()\r\n\r\n\r\n\r\n此时将使用默认系统麦克风，而不是使用音频文件作为信号源。读者可通过创建一个Microphone 类的实例来访问它。\r\n\r\n\r\n\r\n\r\n>>> mic = sr.Microphone()\r\n\r\n\r\n\r\n若系统没有默认麦克风（如在 RaspberryPi 上）或想要使用非默认麦克风，则需要通过提供设备索引来指定要使用的麦克风。读者可通过调用 Microphone 类的list_microphone_names（）函数来获取麦克风名称列表。\r\n\r\n\r\n\r\n\r\n>>> sr.Microphone.list_microphone_names()\r\n[\'HDA Intel PCH: ALC272 Analog (hw:0,0)\',\r\n\'HDA Intel PCH: HDMI 0 (hw:0,3)\',\r\n\'sysdefault\',\r\n\'front\',\r\n\'surround40\',\r\n\'surround51\',\r\n\'surround71\',\r\n\'hdmi\',\r\n\'pulse\',\r\n\'dmix\',\r\n\'default\']\r\n\r\n\r\n注意：你的输出可能与上例不同。\r\n\r\n\r\n\r\nlist_microphone_names（）返回列表中麦克风设备名称的索引。在上面的输出中，如果要使用名为 “front” 的麦克风，该麦克风在列表中索引为 3，则可以创建如下所示的麦克风实例：\r\n\r\n\r\n\r\n\r\n>>> # This is just an example; do not run\r\n>>> mic = sr.Microphone(device_index=3)\r\n\r\n\r\n但大多数情况下需要使用系统默认麦克风。\r\n\r\n\r\n\r\n\r\n使用 listen（）获取麦克风输入数据\r\n\r\n  \r\n\r\n准备好麦克风实例后，读者可以捕获一些输入。\r\n\r\n\r\n\r\n就像 AudioFile 类一样，Microphone 是一个上下文管理器。可以使用 with 块中 Recognizer 类的 listen（）方法捕获麦克风的输入。该方法将音频源作为第一个参数，并自动记录来自源的输入，直到检测到静音时自动停止。\r\n\r\n\r\n\r\n>>> with mic as source:\r\n...  audio = r.listen(source)\r\n...\r\n\r\n\r\n\r\n执行 with 块后请尝试在麦克风中说出 “hello” 。请等待解释器再次显示提示，一旦出现 “>>>” 提示返回就可以识别语音。\r\n\r\n\r\n\r\n>>> r.recognize_google(audio)\r\n\'hello\'\r\n\r\n\r\n\r\n如果没有提示再次返回，可能是因为麦克风收到太多的环境噪音，请使用 Ctrl + C 中断这个过程，从而让解释器再次显示提示。\r\n\r\n\r\n\r\n\r\n要处理环境噪声，可调用 Recognizer 类的 adjust_for_ambient_noise（）函数，其操作与处理噪音音频文件时一样。由于麦克风输入声音的可预测性不如音频文件，因此任何时间听麦克风输入时都可以使用此过程进行处理。\r\n\r\n\r\n\r\n\r\n>>> with mic as source:\r\n...  r.adjust_for_ambient_noise(source)\r\n...  audio = r.listen(source)\r\n...\r\n\r\n\r\n运行上面的代码后稍等片刻，尝试在麦克风中说 “hello” 。同样，必须等待解释器提示返回后再尝试识别语音。\r\n\r\n\r\n\r\n请记住，adjust_for_ambient_noise（）默认分析音频源中1秒钟长的音频。若读者认为此时间太长，可用duration参数来调整。\r\n\r\n\r\n\r\nSpeechRecognition 资料建议 duration 参数不少于0.5秒。某些情况下，你可能会发现，持续时间超过默认的一秒会产生更好的结果。您所需要的最小值取决于麦克风所处的周围环境，不过，这些信息在开发过程中通常是未知的。根据我的经验，一秒钟的默认持续时间对于大多数应用程序已经足够。\r\n\r\n\r\n\r\n\r\n处理难以识别的语音\r\n\r\n\r\n\r\n\r\n尝试将前面的代码示例输入到解释器中，并在麦克风中输入一些无法理解的噪音。你应该得到这样的结果：\r\n\r\n\r\n\r\n\r\nTraceback (most recent call last):\r\nFile \"\", line 1, in <module>\r\nFile \"/home/david/real_python/speech_recognition_primer/venv/lib/python3.5/site-packages/speech_recognition/__init__.py\", line 858, in recognize_google\r\n if not isinstance(actual_result, dict) or len(actual_result.get(\"alternative\", [])) == 0: raise UnknownValueError()\r\nspeech_recognition.UnknownValueError\r\n\r\n\r\n\r\n无法被 API 匹配成文字的音频会引发 UnknownValueError 异常，因此要频繁使用 try  和 except 块来解决此类问题。API 会尽全力去把任何声音转成文字，如短咕噜声可能会被识别为 “How”，咳嗽声、鼓掌声以及舌头咔哒声都可能会被转成文字从而引起异常。\r\n\r\n\r\n\r\n\r\n\r\n结语：\r\n\r\n\r\n\r\n本教程中，我们一直在识别英语语音，英语是 SpeechRecognition 软件包中每个 recognition _ *（）方法的默认语言。但是，识别其他语音也是绝对有可能且很容易完成的。要识别不同语言的语音，请将 recognition _ *（）方法的语言关键字参数设置为与所需语言对应的字符串。\r\n\r\n","timestamp":1590329650947},{"name":"228-qpython.md","path":"6-windows语音识别/228-qpython.md","content":"## SL4A、QPython学习笔记 顶 原\r\n\r\n[![泊松](D:\\Typora_pic\\1468102_50.png) 泊松](https://my.oschina.net/u/1468102) 发布于 2014/03/16 17:54\r\n\r\n[QPython;](https://my.oschina.net/u/1468102?q=QPython;)[sl4a;](https://my.oschina.net/u/1468102?q=sl4a;)[Python;](https://my.oschina.net/u/1468102?q=Python;)[android;](https://my.oschina.net/u/1468102?q=android;)[kivy;](https://my.oschina.net/u/1468102?q=kivy;)[compass;](https://my.oschina.net/u/1468102?q=compass;)[webview](https://my.oschina.net/u/1468102?q=webview)\r\n\r\n耐着性子钻研了一下sl4a与QPython之类，取得了些经验，汇报如下：\r\n\r\n本文使用的apk安装包如下: QPython: QPython70.apk；sl4a+Python：sl4a_r6.apk；PythonForAndroid_r4.apk。安装与使用方法十分简单，网上参考很多，本文不再重复安装方法与HelloWorld之类。\r\n\r\nI. sl4a+Python\r\n\r\n\\1. 重要参考资料：\r\n\r\n(1)[Pro Android Python with SL4A(PDF)](http://ishare.iask.sina.com.cn/f/23302234.html)(2) [SL4A API HELP](http://www.mithril.com.au/android/doc/)；(3) 如何使用Webview：[Webviews with SL4A: A Call and Two Hooks](http://www.pythoncentral.io/python-for-android-using-webviews-sl4a/)\r\n\r\n\\2. 以下一例，演示如何通过sl4a api取得Gps与罗盘信息，相关技术资料详见详见参考资料(2)中LocationFacade;SensorManagerFacade章节\r\n\r\n```\r\n# -*- coding: utf-8 -*-\r\nimport android\r\nimport time\r\nfrom math import radians\r\ndroid = android.Android()\r\ndroid.startSensingTimed(1, 250)\r\ndroid.startLocating()\r\nwhile 1:\r\n    gpsdata = droid.readLocation().result\r\n    s6data = droid.sensorsReadOrientation().result\r\n    if len(gpsdata)>0:\r\n        print gpsdata[\'gps\'][\'bearing\'] #取得Gps导向(bearing)(角度)\r\n    if len(s6data)>0:\r\n        print s6data[0] #取得罗盘方位角(azimuth)(弧度)\r\n    time.sleep(0.5)\r\ndroid.stopLocating()\r\ndroid.stopSensing()\r\n```\r\n\r\n\r\n\r\n\\3. 关于使用webview做UI，请参考资料(1)与(3)，如下提供一个例子（简单指北针），演示Python后端如何与Webview通信，不过此例仅含Python向Webview单向发送数据：webview作为前端，用svg做了一个简单的指北针，每0.5秒根据Python后端读取的方位角数据更新一次。\r\n\r\n```\r\nimport android\r\nimport time\r\nfrom math import radians\r\ndroid = android.Android()\r\ndroid.webViewShow(\'file:///sdcard/sl4a/scripts/compassSVGDrawing.html\')\r\ndroid.startSensingTimed(1, 250)\r\nwhile 1:\r\n    s6data = droid.sensorsReadOrientation().result\r\n    if len(s6data)>0:\r\n        try:\r\n            az = s6data[0]\r\n            droid.eventPost(\'dataout\', str(az))\r\n        except:\r\n            pass      \r\n       \r\n    time.sleep(0.5)\r\ndroid.stopSensing()\r\n\r\n# compassSVGDrawing.html\r\n\'\'\'\r\n<!DOCTYPE html>\r\n<html>\r\n<body bgcolor=\"#000000\">\r\n<svg width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<circle cx=\"45\" cy=\"45\" r=\"40\" stroke=\"green\" stroke-width=\"3\" fill=\"black\"/>\r\n<line id=\"azim\" x1=\"45\" y1=\"5\" x2=\"45\" y2=\"45\" stroke=\"green\"\r\nstroke-width=\"3\"/>\r\n</svg>\r\n<script>\r\nvar droid = new Android(); #注意此行代码与之后的Callback是Python后端与Webview通信的关键技术细节\r\ndroid.registerCallback(\'dataout\', function(e) { \r\nvar az = String(-1*180 * parseFloat(e.data) / Math.PI);\r\nvar cmd = \"rotate(\" + az + \" 45 45)\"\r\ndocument.getElementById(\"azim\").setAttribute(\"transform\", cmd);\r\n});\r\n</script>\r\n</body>\r\n</html>\r\n\'\'\'\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\\4. SL4A与蓝牙\r\n\r\n手头有个蓝牙GPS，就拿来操练了一下，尝试了一下读取蓝牙设备，没想到在我的华硕FonePad上实验很顺利，效果相当不错。\r\n\r\n```\r\nimport android\r\nimport time\r\ndroid = android.Android()\r\ndroid.toggleBluetoothState(True)\r\nresult = droid.bluetoothConnect(\'00001101-0000-1000-8000-00805F9B34FB\', \'00:02:76:C9:92:44\')\r\n#SSP之默认UUID与蓝牙设备物理地址\r\nprint repr(result)\r\nif result:\r\n    while True:\r\n        message = droid.bluetoothReadLine().result\r\n        print message\r\ndroid.toggleBluetoothState(False)\r\n```\r\n\r\n\r\n\r\n\r\n\r\nII. Qpython\r\n\r\nQPython安装仅需一个apk，界面也比sl4a丰富一些，内容已然相当成熟，已经整合了不少好东西，我尝试了其中的androidhelper(基于sl4a)、kivy(出色的图形库)、bottle(精悍的web架构)。\r\n\r\n\\1. 先详细说说QPython与sl4a+Python方案的区别：\r\n\r\n(1)QPython整合了sl4a api，如下是QPython调用sl4a api的代码：\r\n\r\n```\r\nimport androidhelper\r\ndroid = androidhelper.Android()\r\n```\r\n\r\n\r\n\r\n(2)需强调的一点，QPython目前没有实现sl4a与webview的内在通信机制(上文中的指北针代码不适用于QPython)，我认为这是个不足，不过QPython能够制作功能相当的web app，且可以使用kivy制作精良的图形界面、游戏之类的，这是其优势所在。\r\n\r\n(3)QPython内置了bottle web架构，也可以从QPypi安装其他一些流行的web工具，对于制作web app、服务器之类而言肯定更有优势。\r\n\r\n(4) 两者对webview的调用功能有别，细节尚不清楚，兼容性有差异，在我的平板上，QPython在支持svg方面与sla4相比较表现出一些差异，不支持 width =\"100%\"这样的设置，使用sl4a时却支持。若使用sl4a调用Webview显示含canvas的网页，其画质十分粗糙。\r\n\r\n\\2. kivy\r\n\r\n据我的感受，QPython中的kivy真是个好东西，做出来的界面很漂亮，很稳定，就是貌似不太好学。鉴于我还没有一知半解，贴几个对我有所启发的代码和我自己做的一个例子，均在Android设备上测试通过：\r\n\r\n(1) 使用StackLayout：\r\n\r\n注意#1，这部分使用的语言是kivy语言，对kivy核心元素，即widget，安排布局、设定属性。注意如下代码中<ScreenUI>(#2、#4)，其性质是一个用户定义的widget，继承StackLayout，如果无需对StackLayout 编程，则不需要在kivy语言中与Python中专门定义<ScreenUI>，使用StackLayout就可以。ScreenUI这个widget也就成为了一个root，可以用来控制widget的行为与属性(#3、#5)。\r\n\r\n```\r\nfrom kivy.app import App\r\nfrom kivy.uix.boxlayout import BoxLayout\r\nfrom kivy.uix.label import Label\r\nfrom kivy.lang import Builder\r\nfrom kivy.uix.textinput import TextInput\r\nfrom kivy.uix.stacklayout import StackLayout\r\nfrom kivy.uix.button import Button\r\nBuilder.load_string(\"\"\"     #1\r\n<ScreenUI>:                 #2\r\n    orientation: \'lr-bt\'\r\n    Button:\r\n        text: root.text     #3\r\n        size: 100, 100\r\n        size_hint: None, None\r\n    Button:\r\n        text: \'Button 2\'\r\n        size_hint: None, None\r\n        size: 200, 100\"\"\")\r\nclass ScreenUI(StackLayout):  #4\r\n    text = \"Button 1\"         #5\r\nclass WidgetApp(App):\r\n    def build(self):\r\n        app = ScreenUI()\r\n        return app\r\nif __name__ == \'__main__\':\r\n    WidgetApp().run()\r\n```\r\n\r\n\r\n\r\n(2) 旋转图片：尝试旋转三张重叠图片，角度可控，将角度显示在一个标签\r\n\r\n```\r\nfrom kivy.app import App\r\nfrom kivy.uix.image import Image\r\nfrom kivy.lang import Builder\r\nfrom kivy.properties import NumericProperty\r\nfrom kivy.uix.floatlayout import FloatLayout\r\nBuilder.load_string(\'\'\'\r\n[Title@Label]\r\n    pos_hint: {\'center_x\': .5, \'y\': .3}\r\n    text: ctx.text\r\n    font_size: 16\r\n<RotationWid>:\r\n    FloatLayout:\r\n        Title:\r\n            text: root.message\r\n        Image:\r\n            source: \'kivy.png\'\r\n            canvas.before:\r\n                PushMatrix\r\n                Rotate:\r\n                    angle: root.angle\r\n                    origin: self.center\r\n            canvas.after:\r\n                PopMatrix\r\n        Image:\r\n            source: \'Red.png\'\r\n            canvas.before:\r\n                PushMatrix\r\n                Rotate:\r\n                    angle: root.angle\r\n                    origin: self.center\r\n            canvas.after:\r\n                PopMatrix\r\n        Image:\r\n            source: \'tinyCompass.png\'\r\n            canvas.before:\r\n                PushMatrix\r\n                Rotate:\r\n                    angle: root.angle\r\n                    origin: self.center\r\n            canvas.after:\r\n                PopMatrix\r\n\'\'\')\r\nclass RotationWid(FloatLayout):\r\n    angle = NumericProperty(-45)\r\n    message = \'45 degrees\'\r\n   \r\nclass RotationApp(App):\r\n    def build(self):\r\n        return RotationWid()\r\nRotationApp().run()\r\n```\r\n\r\n\r\n\r\n(3)通过旋转图片实现的指北针\r\n\r\n```\r\nfrom kivy.app import App\r\nfrom kivy.uix.image import Image\r\nfrom kivy.clock import Clock\r\nfrom kivy.lang import Builder\r\nfrom kivy.properties import NumericProperty\r\nfrom math import pi\r\nimport androidhelper\r\nimport time\r\ndroid = androidhelper.Android()\r\ndroid.startSensingTimed(1, 250)\r\nBuilder.load_string(\'\'\'\r\n<RotateCompass>:\r\n    source: \'Red.png\'\r\n    size: 256,256\r\n    canvas.before:\r\n        PushMatrix\r\n        Rotate:\r\n            angle: root.angle\r\n            origin: self.center\r\n    canvas.after:\r\n        PopMatrix\r\n\'\'\')\r\nclass RotateCompass(Image):\r\n    angle = NumericProperty(0)\r\n    def __init__(self, **kwargs):\r\n        super(RotateCompass,self).__init__(**kwargs)\r\n        Clock.schedule_interval(self.my_callback, 1) \r\n        #clock时间处理，周期为1秒，动作定义在my_callback中，周期性给angle赋值\r\n    def my_callback(self,dt):\r\n        s6data = droid.sensorsReadOrientation().result\r\n        if len(s6data)>0:\r\n            self.angle = 180 * s6data[0] / pi \r\nclass RotationApp(App):\r\n    def build(self):\r\n        return RotateCompass()\r\nRotationApp().run()\r\ndroid.stopSensing()\r\n```\r\n\r\n\r\n\r\n\\3. QPython Web App\r\n\r\nQPython只给了一个简单的例子，资料少的可怜。尝试了一下，也整出一罗盘来。用XMLHttpRequest与长轮询(long polling)这个解决方法实现网页客户端与服务器的通信。\r\n\r\n```\r\n#qpy:webapp:Compass_Long_Polling \r\n#qpy:fullscreen\r\n#qpy://localhost:8080/ #此行必须\r\n\"\"\"\r\nThis is a sample for qpython webapp\r\n\"\"\"\r\n\r\nfrom bottle import route, run\r\nimport androidhelper\r\nimport signal, os\r\nimport time\r\n\r\ncode = \'\'\'\r\n<html>\r\n<body>\r\n<center>\r\n<svg width=\"200\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<circle cx=\"100\" cy=\"100\" r=\"80\" stroke=\"navy\" stroke-width=\"5\" fill=\"none\"/>\r\n<line id=\"azim\" x1=\"100\" y1=\"20\" x2=\"100\" y2=\"100\" stroke=\"navy\"\r\nstroke-width=\"5\"/>\r\n<text id=\"degree\" x=\"0\" y=\"20\" stroke=\"navy\">90</text>\r\n</svg><br>\r\n<button onclick=\"shutdown()\">\r\nshut down</button>\r\n</center>\r\n<script>\r\nvar az;\r\nvar deg;\r\nvar url = \"http://localhost:8080/\"\r\nvar xhr;\r\nxhr=new XMLHttpRequest();\r\nxhr.onreadystatechange=function()\r\n{\r\n    if (xhr.readyState==4)\r\n    {\r\n    if (xhr.status==200)\r\n    {\r\n    az=parseFloat(xhr.responseText);\r\n    if(az>=0){\r\n    deg = az*180/Math.PI;\r\n    }else{\r\n    deg = 360+az*180/Math.PI;\r\n    }\r\n    deg=String(deg.toFixed(2));\r\n    az = String(-180 * az / Math.PI);\r\n    var cmd = \"rotate(\" + az + \" 100 100)\";\r\n    document.getElementById(\"degree\").textContent=\"^\"+deg;\r\n    document.getElementById(\"azim\").setAttribute(\"transform\", cmd);\r\n    }\r\n    xhr.open(\"GET\",url+\"azimuth\",true);\r\n    xhr.send();\r\n    }\r\n}\r\nxhr.open(\"GET\",url+\"azimuth\",true);\r\nxhr.send();\r\n\r\nfunction shutdown()\r\n{\r\nvar xhr = new XMLHttpRequest();\r\nxhr.open(\"GET\", url+\"shutdown\", false);\r\nxhr.send(null);\r\n}\r\n</script>\r\n</body>\r\n</html>\r\n\'\'\'\r\n\r\ndroid = androidhelper.Android()\r\ndroid.startSensingTimed(1, 250)\r\n\r\n@route(\'/\')\r\ndef index():\r\n    return code\r\n\r\n@route(\'/azimuth\')\r\ndef azimuth():\r\n    time.sleep(0.3)\r\n    s6data = droid.sensorsReadOrientation().result\r\n    if len(s6data)>0:\r\n        return str(s6data[0])\r\n\r\n@route(\"/shutdown\")\r\ndef shutdown():\r\n    droid.stopSensing()\r\n    os.kill(os.getpid(), signal.SIGTERM)\r\n\r\nrun(host=\'localhost\', port=8080)\r\n```\r\n\r\n\r\n\r\n\\4. jQuery Mobile\r\n\r\n尝试了一下jQuery Mobile，也就是拷贝到某个子目录后观察了一下例子，在QPython中使用没问题，暂没用它干什么，不多说了。","timestamp":1590329650947},{"name":"229-voiceAttack.md","path":"6-windows语音识别/229-voiceAttack.md","content":"windows miscellaneous functions\r\n\r\n![image-20200412070524315](D:\\Typora_pic\\image-20200412070524315.png)\r\n\r\n```\r\nToggle Desktop\r\n\r\n```\r\n\r\n","timestamp":1590329650947},{"name":"230-语音识别命令对照表.md","path":"6-windows语音识别/230-语音识别命令对照表.md","content":"# Windows 语音识别命令\r\n\r\n适用于： Windows 10Windows 7\r\n\r\n------\r\n\r\n选择产品版本\r\n\r\n\r\n\r\n所有产品Windows 10Windows 7\r\n\r\n## Windows 10\r\n\r\n------\r\n\r\nWindows 语音识别可使你仅凭借语音控制电脑，而无需键盘或鼠标。下表列出了可与语音识别一起使用的命令。\r\n\r\n如果某个字词或短语为粗体，则它是一个示例。将其替换为相似的字词以获取所需的结果。\r\n\r\n有关如何第一次设置语音识别的信息，请参阅[使用语音识别](https://support.microsoft.com/zh-cn/help/17208)。\r\n\r\n注意\r\n\r\n任何时候，如果你需要了解使用什么命令，都可以说“我可以说什么？”\r\n\r\n\r\n\r\n语音识别仅适用于以下语言： 英语（美国、英国、加拿大、印度和澳大利亚）、法语、德语、日语、中文普通话（简体中文和繁体中文）以及西班牙语。\r\n\r\n\r\n\r\n#### 常用语音识别命令\r\n\r\n| 执行此操作                                                   | 说出的内容                                                   |\r\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\r\n| 打开“开始”屏幕                                               | 开始                                                         |\r\n| 打开 Cortana注意Cortana 仅在特定的国家/地区中提供，并且某些 Cortana 功能可能不支持随时随地使用。如果 Cortana 不可用或已关闭，你仍然可以使用[搜索](https://support.microsoft.com/zh-cn/help/10748)。 | 按 Windows C                                                 |\r\n| 打开“搜索”                                                   | 按 Windows S                                                 |\r\n| 在应用中执行操作                                             | 右键单击；按 Windows Z；按 ctrl B                            |\r\n| 按名称选择项目                                               | **文件**；**开始**；**查看**                                 |\r\n| 选择项目或图标                                               | 单击**回收站**；单击**计算机**；单击**文件名**               |\r\n| 双击项目                                                     | 双击**回收站**；双击**计算机**；双击**文件名**               |\r\n| 切换到打开的应用                                             | 切换到**画图**；切换到**写字板**；切换到**程序名称**；切换应用程序 |\r\n| 沿一个方向滚动                                               | 向上滚动；向下滚动；向左滚动；向右滚动                       |\r\n| 在文档中插入新段落或新行                                     | 新段落；换行                                                 |\r\n| 在文档中选择字词                                             | 选择**字词**                                                 |\r\n| 选择字词并开始更正它                                         | 更正**字词**                                                 |\r\n| 选择并删除特定字词                                           | 删除**字词**                                                 |\r\n| 显示适用命令列表                                             | 我可以说什么？                                               |\r\n| 更新当前可用的语音命令列表                                   | 刷新语音命令                                                 |\r\n| 打开聆听模式                                                 | 开始聆听                                                     |\r\n| 关闭聆听模式                                                 | 停止聆听                                                     |\r\n| 移动语音识别麦克风栏                                         | 移动语音识别                                                 |\r\n| 最小化麦克风栏                                               | 最小化语音识别                                               |\r\n\r\n#### 听写的命令\r\n\r\n| 执行此操作                                                  | 说出的内容                                 |\r\n| ----------------------------------------------------------- | ------------------------------------------ |\r\n| 在文档中插入新行                                            | 新行                                       |\r\n| 在文档中插入新段落                                          | 新段落                                     |\r\n| 插入选项卡                                                  | 选项卡                                     |\r\n| 插入由字母组成的字词（例如，插入字词“comma”来代替标点符号） | 由字母组成的**字词**                       |\r\n| 插入数值形式的数字（例如，插入 3 而不是字词“三”）           | 数值形式的**数字**                         |\r\n| 将光标放到特定字词之前                                      | 转到**字词**                               |\r\n| 将光标放到特定字词之后                                      | 转到**字词**之后                           |\r\n| 不在下一个字词之前插入空格                                  | 无空格                                     |\r\n| 转到当前句子的开头                                          | 转到句子开头                               |\r\n| 转到当前段落的开头                                          | 转到段落开头                               |\r\n| 转到当前文档的开头                                          | 转到文档开头                               |\r\n| 转到当前句子的结尾                                          | 转到句子结尾                               |\r\n| 转到当前段落的结尾                                          | 转到段落结尾                               |\r\n| 转到当前文档的结尾                                          | 转到文档结尾                               |\r\n| 选择当前文档中的字词                                        | 选择**字词**                               |\r\n| 选择当前文档中的字词范围                                    | 选择**字词范围**；通过**字词**选择**字词** |\r\n| 选择当前文档中的所有文本                                    | 全选                                       |\r\n| 选择光标位置之前的多个字词                                  | 选择前 **20** 个字词；选择前 **10** 个字词 |\r\n| 选择光标位置之后的多个字词                                  | 选择后 **20** 个字词；选择后 **10** 个字词 |\r\n| 选择最后听写的文本                                          | 选择该文本                                 |\r\n| 清除屏幕上的选定内容                                        | 清除选定内容                               |\r\n| 将字词的首字母大写                                          | 大写字母**字词**                           |\r\n| 将字词的所有字母大写                                        | 所有大写字母**字词**                       |\r\n| 使字词中的所有字母小写                                      | 非大写字母**字词**                         |\r\n| 将后续多个字词更改为大写                                    | 将后 **10** 个字词更改为大写               |\r\n| 将后续多个字词更改为小写                                    | 将后 **10** 个字词更改为小写               |\r\n| 删除前一个句子                                              | 删除前一个句子                             |\r\n| 删除下一个句子                                              | 删除下一个句子                             |\r\n| 删除前一个段落                                              | 删除前一个段落                             |\r\n| 删除下一个段落                                              | 删除下一个段落                             |\r\n| 删除所选文本或最后听写的文本                                | 删除该文本                                 |\r\n\r\n#### 键盘的命令\r\n\r\n| 执行此操作                 | 说出的内容                                                   |\r\n| -------------------------- | ------------------------------------------------------------ |\r\n| 按键或键组合               | 按**键盘键**；按 **A**；按**字母 B**；按 **Shift + A**；按 **Ctrl + A** |\r\n| 按某些键盘键（不先说“按”） | **Delete**；**Backspace**；**Enter**；**Page Up**；**Page Down**；**Home**；**End**；**Tab** |\r\n\r\n注意\r\n\r\n你还可以使用 ICAONATO 注音字母表。例如，说“按 Alpha”表示按“A”，或说“按 Bravo”表示按“B”。\r\n\r\n\r\n\r\n用于键盘的语音识别命令仅适用于使用拉丁字母的语言。\r\n\r\n\r\n\r\n#### 标点符号和特殊字符的命令\r\n\r\n| 插入的内容 | 说出的内容             |\r\n| ---------- | ---------------------- |\r\n| ,          | 逗号                   |\r\n| ;          | 分号                   |\r\n| .          | 句号；圆点；小数点     |\r\n| :          | 冒号                   |\r\n| “          | 左双引号；左引号       |\r\n| ”          | 右双引号；右引号       |\r\n| \'          | 撇号                   |\r\n| ‘          | 左单引号               |\r\n| ’          | 右单引号               |\r\n| >          | 大于号                 |\r\n| <          | 小于号                 |\r\n| /          | 正斜杠                 |\r\n| \\          | 反斜杠                 |\r\n| ~          | 波形符                 |\r\n| @          | At 符号                |\r\n| !          | 感叹号；惊叹号         |\r\n| ?          | 问号                   |\r\n| #          | 数字标记；英镑标记     |\r\n| $          | 美元符号               |\r\n| %          | 百分号                 |\r\n| ^          | 脱字号                 |\r\n| (          | 左括号；左圆括号       |\r\n| )          | 右括号；右圆括号       |\r\n| _          | 下划线                 |\r\n| -          | 短划线；减号；连字符   |\r\n| -          | 短破折号               |\r\n| —          | 长破折号               |\r\n| =          | 等号                   |\r\n| +          | 加号                   |\r\n| {          | 左花括号；左大括号     |\r\n| }          | 右花括号；右大括号     |\r\n| [          | 左中括号；左方括号     |\r\n| ]          | 右中括号；右方括号     |\r\n| \\|         | 竖杠                   |\r\n| :-)        | 笑脸                   |\r\n| :-(        | 悲伤的脸               |\r\n| ;-)        | 眨眼的脸               |\r\n| ™          | 商标符号               |\r\n| ¾          | 四分之三符号           |\r\n| ¼          | 四分之一符号           |\r\n| ½          | 二分之一符号           |\r\n| £          | 英镑符号               |\r\n| &          | 与号；和符号           |\r\n| *          | 星号                   |\r\n| //         | 双斜杠                 |\r\n| `          | 反引号                 |\r\n| <          | 左尖括号               |\r\n| >          | 右尖括号               |\r\n| ±          | 加减符号               |\r\n| «          | 左书名号               |\r\n| »          | 右书名号               |\r\n| ×          | 乘号                   |\r\n| ÷          | 除号                   |\r\n| ¢          | 分币符号               |\r\n| ¥          | 日元符号               |\r\n| §          | 节标记                 |\r\n| ©          | 版权符号               |\r\n| ®          | 注册标记；注册商标符号 |\r\n| °          | 度符号                 |\r\n| ¶          | 段落标记               |\r\n| ...        | 省略号；点点点         |\r\n| ƒ          | 函数符号               |\r\n\r\n\r\n\r\n#### Windows 和应用的命令\r\n\r\n| 执行此操作                           | 说出的内容                                                   |\r\n| ------------------------------------ | ------------------------------------------------------------ |\r\n| 按名称选择项目                       | **文件**；**开始**；**查看**                                 |\r\n| 选择项目或图标                       | 单击**回收站**；单击**计算机**；单击**文件名**               |\r\n| 双击项目                             | 双击**计算机**；双击**回收站**；双击**文件夹名称**           |\r\n| 右键单击项目                         | 右键单击**计算机**；右键单击**回收站**；右键单击**文件夹名称** |\r\n| 最小化所有窗口以显示桌面             | 显示桌面                                                     |\r\n| 选择某些内容（如果你不知道如何表达） | 显示编号（活动窗口中每个项目的编号将显示在屏幕上。说出与项目对应的编号可选择该项目。） |\r\n| 选择带编号的项目                     | **19** 确定；**5** 确定                                      |\r\n| 双击带编号的项目                     | 双击 **19**；双击 **5**                                      |\r\n| 右键单击带编号的项目                 | 右键单击 **19**；右键单击 **5**                              |\r\n| 打开应用                             | 打开**画图**；打开**写字板**；打开**应用名称**               |\r\n| 切换到打开的应用                     | 切换到**画图**；切换到**写字板**；切换到**应用名称**；切换应用程序 |\r\n| 关闭应用                             | 关闭该应用；关闭**画图**；关闭**文档**                       |\r\n| 最小化                               | 最小化该内容；最小化**画图**；最小化**文档**                 |\r\n| 最大化                               | 最大化该内容；最大化**画图**；最大化**文档**                 |\r\n| 还原                                 | 还原该内容；还原**画图**；还原**文档**                       |\r\n| 剪切                                 | 剪切该内容；剪切                                             |\r\n| 复制                                 | 复制该内容；复制                                             |\r\n| 粘贴                                 | 粘贴                                                         |\r\n| 删除                                 | 删除该内容；删除                                             |\r\n| 撤销                                 | 撤消该内容；擦除该内容；撤消                                 |\r\n| 沿一个方向滚动                       | 向上滚动；向下滚动；向右滚动；向左滚动                       |\r\n| 在页面中滚动确切的距离               | 向下滚动 **2** 页；向上滚动 **10** 页                        |\r\n| 以其他单位滚动确切的距离             | 向上滚动 **5**；向下滚动 **7**                               |\r\n| 转到表单或应用中的字段               | 转到**字段名称**；转到**主题**；转到**地址**；转到**抄送**   |\r\n\r\n\r\n\r\n#### 用于使用鼠标的命令\r\n\r\n| 执行此操作                           | 说出的内容                                                   |\r\n| ------------------------------------ | ------------------------------------------------------------ |\r\n| 显示鼠标网格                         | 鼠标网格                                                     |\r\n| 将指针移动到鼠标网格方块的中心       | **方块编号**；1；7；9                                        |\r\n| 选择鼠标网格方块                     | 单击**方块编号**                                             |\r\n| 选择要使用鼠标拖动的项目             | **项目显示位置的方块编号**（后跟）标记；**3** 标记；**7** 标记；**9** 标记 |\r\n| 在鼠标网格中选择要将项目拖动到的区域 | **要将项目拖动到的方块的编号**（后跟）单击；**4** 单击；**5** 单击；**6** 单击 |","timestamp":1590329650947}]