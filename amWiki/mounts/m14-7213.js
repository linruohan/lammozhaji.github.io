if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m14']=[{"name":"171-Github访问速度慢的解决方法.md","path":"14-问题收集库/171-Github访问速度慢的解决方法.md","content":"# Github访问速度慢的解决方法\r\n\r\n主要修改的hosts地址为：github.com 和 github.global.ssl.fastly.net 。查看网站对应的IP地址的方法为访问ipaddress网站，输入网址则可查阅到对应的IP地址。\r\n\r\nwindows下hosts地址：C:\\Windows\\System32\\drivers\\etc\r\n\r\nipaddress地址：https://www.ipaddress.com/\r\n\r\n当前日期下，我查阅到的IP对应为：\r\n\r\n151.101.185.194 github.global.ssl.fastly.net\r\n192.30.253.113 github.com \r\n\r\n修改的Github对应的完整hosts为：\r\n\r\n\\# Github\r\n192.30.253.113 github.com\r\n151.101.184.133 assets-cdn.github.com\r\n185.199.108.153 documentcloud.github.com\r\n192.30.253.118 gist.github.com\r\n185.199.108.153 help.github.com\r\n192.30.253.120 nodeload.github.com\r\n151.101.184.133 raw.github.com\r\n18.204.240.114 status.github.com\r\n192.30.253.166 training.github.com\r\n192.30.253.112 www.github.com\r\n151.101.185.194 github.global.ssl.fastly.net\r\n151.101.184.133 avatars0.githubusercontent.com\r\n151.101.184.133 avatars1.githubusercontent.com\r\n\r\n \r\n\r\n修改完hosts还不会立即生效，你需要刷新DNS缓存，告诉电脑我的hosts文件已经修改了。\r\n\r\n输入指令：sudo /etc/init.d/networking restart 即可。\r\n\r\n然后，你关闭浏览器再访问github就不会出现速度很慢的现象了。（亲测不关闭浏览器直接访问也可）\r\n\r\n \r\n\r\nwindows下刷新DNS的方法：\r\n\r\n打开CMD\r\n\r\n输入ipconfig /flushdns\r\n\r\n ","timestamp":1590329650947},{"name":"172-Idea问题：“marketplace plugins are not loaded”解决方案.md","path":"14-问题收集库/172-Idea问题：“marketplace plugins are not loaded”解决方案.md","content":"# Idea问题：“marketplace plugins are not loaded”解决方案\r\n\r\n但是在我点开settings，然后打开plugins工具时竟然给我提示“marketplace plugins are not loaded”！![技术分享图片](D:\\workspace\\vscode_space\\My_MarkdownBook\\Topora_pic\\20190129192033061902.png)开什么玩笑，我手机还开着直播呢！经上网了解发现IDEA的模块系统加载不出来，是由于IDEA的网络安全机制造成的，类似于windows的防火墙，IDEA误认为你的网络不安全，不给你连接，本质为公司的网络被IDEA认为不安全，具体IDEA为什么会这么认为，原因暂时我还不知道。\r\n\r\n解决方法时这样的：点击File->settings->Appearance&Behavior->System Settings -> Updates　　将Use secure connection选项的√去掉！　　==然后重点！重启一下Idea==！！！![技术分享图片](D:\\workspace\\vscode_space\\My_MarkdownBook\\Topora_pic\\20190129192033175188.png)再打开plugins查询alibaba就出现了！！！![技术分享图片](D:\\workspace\\vscode_space\\My_MarkdownBook\\Topora_pic\\20190129192033296286.png) [Idea问题：“marketplace plugins are not loaded”解决方案](http://www.mamicode.com/info-detail-2602604.html)标签：[机制](http://www.mamicode.com/so/1/机制)  [win](http://www.mamicode.com/so/1/win)  [img](http://www.mamicode.com/so/1/img)  [src](http://www.mamicode.com/so/1/src)  [ide](http://www.mamicode.com/so/1/ide)  [方法](http://www.mamicode.com/so/1/方法)  [update](http://www.mamicode.com/so/1/update)  [cti](http://www.mamicode.com/so/1/cti)  [amp](http://www.mamicode.com/so/1/amp)  ","timestamp":1590329650947},{"name":"173-vscode python开发插件推荐.md","path":"14-问题收集库/173-vscode python开发插件推荐.md","content":"# [vscode python开发插件推荐](https://www.cnblogs.com/liuyanhang/p/10984465.html)\r\n\r\n vscode作为一款好用的轻量级代码编辑器，不仅支持代码调试，而且还有丰富的插件库，可以说是免费好用，对于初学者来说用来写写python是再合适不过了。下面就推荐几款个人觉得还不错的插件，希望可以帮助大家更好的写代码，先上一张最终效果图。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133059026-1990342693.png)\r\n\r\n \r\n\r\nPython\r\n    首先当然要推荐这个必备插件python了，提供了代码分析，高亮，规范化等很多基本功能，装好这个就可以开始愉快的写python了。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133114571-1756031552.png)\r\n\r\n \r\n\r\n \r\n\r\nvscode-icons\r\n    vscode现在虽然已经自带了文件图标，但是作为一个颜控还是觉得略丑，这个插件提供各种图标就非常漂亮了，推荐给各位颜控。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133136812-1017261798.png)\r\n\r\n \r\n\r\n \r\n\r\nOne Dark Pro  &  Brackets Light Pro \r\n    这两款主体是我比较喜欢的，一个深色主体一个亮色主体，可以换着来。\r\n\r\n \r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133200238-1715927950.png)\r\n\r\n![img](F:\\Typora_book\\typora_pic\\1423526-20190606133213676-747831202.png)\r\n\r\n \r\n\r\n \r\n\r\nfilesize\r\n    一款在左下角显示文件大小的插件，还是挺实用的\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133224096-1878281008.png)\r\n\r\n \r\n\r\n \r\n\r\n\r\nBracket Pair Colorizer\r\n   代码颜色高亮一般只会帮你区分不同的变量，这款插件给不同的括号换上了不同的颜色，括号的多的时候非常实用。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133235785-1598632377.png)\r\n\r\n \r\n\r\n \r\n\r\nAnaconda Extension Pack\r\n    这个插件就推荐给用anaconda的同学了，大大增强了代码提示功能。原始的代码提示基本只包含了python标准库，有了这个插件之后各种第三方库基本都能实现代码提示了，并且还会额外显示每个方法的帮助。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133245115-2101212823.png)\r\n\r\n \r\n\r\n \r\n\r\nSettings Sync\r\n   这个插件可以实现同步你的vscode设置，包括setting文件，插件设置等，不过你要先有github的账户，因为它利用了github的token功能，相当于把这样文件上传到了你的github账户中，这样你就可以在其它的电脑上直接下载的配置文件了，不用再配置一次了，相当方便省事了。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133300949-1652629549.png)\r\n\r\n \r\n\r\n \r\n\r\n​    先推荐这么多，以后遇到好用的插件还会继续更新！\r\n\r\n \r\n\r\n4.30更新\r\n\r\nPath Autocomplete\r\n   有时候程序需要读取文件，自己手动去复制文件路径还是比较麻烦的，不过有了这个插件就方便多了，它能自动感知当前目录下所有的文件，只需要你自己选择就好了。\r\n\r\n ![img](F:\\Typora_book\\typora_pic\\1423526-20190606133325345-553646614.png)\r\n\r\nVS code的常用python插件推荐，建议全部安装\r\n以下插件建议全部安装，绝对都是最热门，最好用的插件\r\n\r\n1. Python（必备）\r\nVScode自带的官方插件\r\n\r\n2. Anaconda Extension Pack\r\n可以自动补全anaconda包中的属性名称\r\n\r\n3. Code Spell Checker\r\n单词拼写检查，非常推荐，有时候会拼错单词，这个不仅可以指出错误，还能提供正确单词的拼写方式。\r\n安装好之后，选中拼写错误的单词，旁边出现黄色小灯泡，点击选择单词，直接替换。\r\n\r\n4. Guides\r\n提供缩进检查，有时候for, if 写多了，就分不清对应的列数，VScode虽然自带的有缩进检查，但是不明显，这个将缩进线显示为红色，非常醒目。\r\n\r\n5. Settings Sync\r\n将VScode的配置上传到github，以后换机器，重装系统，随时下载，不用重新找教程了\r\n\r\n6. vscode-icons\r\n文件图标主题，能够让你的各种文件一目了然，不用再去看扩展名，而且超级好看\r\n\r\n7. SynthWave‘84\r\n字体颜色主题，我个人非常喜欢的一套高亮字体方案\r\n\r\n8. koroFileHeader\r\n文件头注释（ctrl+alt+i） 和函数头注释（ctrl+alt+t）工具，一键生成头注释\r\n\r\n点赞 2\r\n------------------------------------------------\r\n版权声明：本文为CSDN博主「yaologos」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\r\n原文链接：https://blog.csdn.net/yaologos/article/details/94433516 \r\n\r\n \r\n\r\n如何使vscode运行程序时在当前文件夹中打开终端？\r\nvscode运行task,调试或者直接在终端运行文件时都是默认在vscode打开的文件夹中打开终端运行或者调试程序的，这时候存在的问题是，如果运行一个在子文件夹中需要读取文件的程序，按照其默认设置只能把文件放在主文件夹中，虽然也能通过cd之类的操作解决，但本着能省事就省事的原则，可以通过修改launch.json文件实现调试程序时在当前文件夹中打开终端运行程序，我的launch.json的文件如下：\r\n\r\n{\r\n\"name\": \"Python\",\r\n\"type\": \"python\",\r\n\"request\": \"launch\",\r\n\"stopOnEntry\": false,\r\n\"pythonPath\": \"${config:python.pythonPath}\",\r\n\"program\": \"${file}\",\r\n\"cwd\": \"${fileDirname}\",\r\n\"env\": {},\r\n\"envFile\": \"${workspaceRoot}/.env\",\r\n\"debugOptions\": [\r\n\"WaitOnAbnormalExit\",\r\n\"WaitOnNormalExit\",\r\n\"RedirectOutput\"\r\n]\r\n}\r\n其实重点在于修改了cwd参数，有如下变量可以选择：\r\n\r\n${workspaceRoot} the path of the folder opened in VS Code(VSCode中打开文件夹的路径)\r\n${workspaceRootFolderName} the name of the folder opened in VS Code without any solidus (/)(VSCode中打开文件夹的路径, 但不包含\"/\")\r\n${file} the current opened file(当前打开的文件)\r\n${relativeFile} the current opened file relative to workspaceRoot(当前打开的文件,相对于workspaceRoot)\r\n${fileBasename} the current opened file\'s basename(当前打开文件的文件名, 不含扩展名)\r\n${fileDirname} the current opened file\'s dirname(当前打开文件的目录名)\r\n${fileExtname} the current opened file\'s extension(当前打开文件的扩展名)\r\n${cwd} the task runner\'s current working directory on startup()\r\n\r\n这样设置cwd参数为${fileDirname} ，调试程序时就是直接在当前文件中打开终端了。至于其它方法我在网上找了很久，自己也尝试过，但只有这种是成功了，也只能安慰自己能用就行了。\r\n\\---------------------\r\n\r\n原文：https://blog.csdn.net/hnshhshjq/article/details/80140401 ","timestamp":1590329650947}]